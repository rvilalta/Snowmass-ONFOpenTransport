# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class TopologyConstraint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, include_topology: List[str]=None, avoid_topology: List[str]=None, include_path: List[str]=None, exclude_path: List[str]=None, include_link: List[str]=None, exclude_link: List[str]=None, include_node: List[str]=None, exclude_node: List[str]=None, preferred_transport_layer: List[str]=None):  # noqa: E501
        """TopologyConstraint - a model defined in Swagger

        :param include_topology: The include_topology of this TopologyConstraint.  # noqa: E501
        :type include_topology: List[str]
        :param avoid_topology: The avoid_topology of this TopologyConstraint.  # noqa: E501
        :type avoid_topology: List[str]
        :param include_path: The include_path of this TopologyConstraint.  # noqa: E501
        :type include_path: List[str]
        :param exclude_path: The exclude_path of this TopologyConstraint.  # noqa: E501
        :type exclude_path: List[str]
        :param include_link: The include_link of this TopologyConstraint.  # noqa: E501
        :type include_link: List[str]
        :param exclude_link: The exclude_link of this TopologyConstraint.  # noqa: E501
        :type exclude_link: List[str]
        :param include_node: The include_node of this TopologyConstraint.  # noqa: E501
        :type include_node: List[str]
        :param exclude_node: The exclude_node of this TopologyConstraint.  # noqa: E501
        :type exclude_node: List[str]
        :param preferred_transport_layer: The preferred_transport_layer of this TopologyConstraint.  # noqa: E501
        :type preferred_transport_layer: List[str]
        """
        self.swagger_types = {
            'include_topology': List[str],
            'avoid_topology': List[str],
            'include_path': List[str],
            'exclude_path': List[str],
            'include_link': List[str],
            'exclude_link': List[str],
            'include_node': List[str],
            'exclude_node': List[str],
            'preferred_transport_layer': List[str]
        }

        self.attribute_map = {
            'include_topology': 'include-topology',
            'avoid_topology': 'avoid-topology',
            'include_path': 'include-path',
            'exclude_path': 'exclude-path',
            'include_link': 'include-link',
            'exclude_link': 'exclude-link',
            'include_node': 'include-node',
            'exclude_node': 'exclude-node',
            'preferred_transport_layer': 'preferred-transport-layer'
        }

        self._include_topology = include_topology
        self._avoid_topology = avoid_topology
        self._include_path = include_path
        self._exclude_path = exclude_path
        self._include_link = include_link
        self._exclude_link = exclude_link
        self._include_node = include_node
        self._exclude_node = exclude_node
        self._preferred_transport_layer = preferred_transport_layer

    @classmethod
    def from_dict(cls, dikt) -> 'TopologyConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The topology-constraint of this TopologyConstraint.  # noqa: E501
        :rtype: TopologyConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_topology(self) -> List[str]:
        """Gets the include_topology of this TopologyConstraint.


        :return: The include_topology of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._include_topology

    @include_topology.setter
    def include_topology(self, include_topology: List[str]):
        """Sets the include_topology of this TopologyConstraint.


        :param include_topology: The include_topology of this TopologyConstraint.
        :type include_topology: List[str]
        """

        self._include_topology = include_topology

    @property
    def avoid_topology(self) -> List[str]:
        """Gets the avoid_topology of this TopologyConstraint.


        :return: The avoid_topology of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._avoid_topology

    @avoid_topology.setter
    def avoid_topology(self, avoid_topology: List[str]):
        """Sets the avoid_topology of this TopologyConstraint.


        :param avoid_topology: The avoid_topology of this TopologyConstraint.
        :type avoid_topology: List[str]
        """

        self._avoid_topology = avoid_topology

    @property
    def include_path(self) -> List[str]:
        """Gets the include_path of this TopologyConstraint.


        :return: The include_path of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._include_path

    @include_path.setter
    def include_path(self, include_path: List[str]):
        """Sets the include_path of this TopologyConstraint.


        :param include_path: The include_path of this TopologyConstraint.
        :type include_path: List[str]
        """

        self._include_path = include_path

    @property
    def exclude_path(self) -> List[str]:
        """Gets the exclude_path of this TopologyConstraint.


        :return: The exclude_path of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._exclude_path

    @exclude_path.setter
    def exclude_path(self, exclude_path: List[str]):
        """Sets the exclude_path of this TopologyConstraint.


        :param exclude_path: The exclude_path of this TopologyConstraint.
        :type exclude_path: List[str]
        """

        self._exclude_path = exclude_path

    @property
    def include_link(self) -> List[str]:
        """Gets the include_link of this TopologyConstraint.


        :return: The include_link of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._include_link

    @include_link.setter
    def include_link(self, include_link: List[str]):
        """Sets the include_link of this TopologyConstraint.


        :param include_link: The include_link of this TopologyConstraint.
        :type include_link: List[str]
        """

        self._include_link = include_link

    @property
    def exclude_link(self) -> List[str]:
        """Gets the exclude_link of this TopologyConstraint.


        :return: The exclude_link of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._exclude_link

    @exclude_link.setter
    def exclude_link(self, exclude_link: List[str]):
        """Sets the exclude_link of this TopologyConstraint.


        :param exclude_link: The exclude_link of this TopologyConstraint.
        :type exclude_link: List[str]
        """

        self._exclude_link = exclude_link

    @property
    def include_node(self) -> List[str]:
        """Gets the include_node of this TopologyConstraint.


        :return: The include_node of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._include_node

    @include_node.setter
    def include_node(self, include_node: List[str]):
        """Sets the include_node of this TopologyConstraint.


        :param include_node: The include_node of this TopologyConstraint.
        :type include_node: List[str]
        """

        self._include_node = include_node

    @property
    def exclude_node(self) -> List[str]:
        """Gets the exclude_node of this TopologyConstraint.


        :return: The exclude_node of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._exclude_node

    @exclude_node.setter
    def exclude_node(self, exclude_node: List[str]):
        """Sets the exclude_node of this TopologyConstraint.


        :param exclude_node: The exclude_node of this TopologyConstraint.
        :type exclude_node: List[str]
        """

        self._exclude_node = exclude_node

    @property
    def preferred_transport_layer(self) -> List[str]:
        """Gets the preferred_transport_layer of this TopologyConstraint.


        :return: The preferred_transport_layer of this TopologyConstraint.
        :rtype: List[str]
        """
        return self._preferred_transport_layer

    @preferred_transport_layer.setter
    def preferred_transport_layer(self, preferred_transport_layer: List[str]):
        """Sets the preferred_transport_layer of this TopologyConstraint.


        :param preferred_transport_layer: The preferred_transport_layer of this TopologyConstraint.
        :type preferred_transport_layer: List[str]
        """
        allowed_values = ["OTSiA", "OCH", "OTU", "ODU", "ETH", "ETY", "DSR"]  # noqa: E501
        if not set(preferred_transport_layer).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preferred_transport_layer` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(preferred_transport_layer) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._preferred_transport_layer = preferred_transport_layer
