# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.capacity import Capacity  # noqa: F401,E501
from tapi_server.models.cost_characteristic import CostCharacteristic  # noqa: F401,E501
from tapi_server.models.latency_characteristic import LatencyCharacteristic  # noqa: F401,E501
from tapi_server.models.route_compute_policy import RouteComputePolicy  # noqa: F401,E501
from tapi_server.models.time_range import TimeRange  # noqa: F401,E501
from tapi_server import util


class ConnectivityConstraint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, route_objective_function: str=None, diversity_policy: str=None, service_type: str=None, service_level: str=None, is_exclusive: bool=None, requested_capacity: Capacity=None, schedule: TimeRange=None, cost_characteristic: List[CostCharacteristic]=None, latency_characteristic: List[LatencyCharacteristic]=None, coroute_inclusion: str=None, diversity_exclusion: List[str]=None):  # noqa: E501
        """ConnectivityConstraint - a model defined in Swagger

        :param route_objective_function: The route_objective_function of this ConnectivityConstraint.  # noqa: E501
        :type route_objective_function: str
        :param diversity_policy: The diversity_policy of this ConnectivityConstraint.  # noqa: E501
        :type diversity_policy: str
        :param service_type: The service_type of this ConnectivityConstraint.  # noqa: E501
        :type service_type: str
        :param service_level: The service_level of this ConnectivityConstraint.  # noqa: E501
        :type service_level: str
        :param is_exclusive: The is_exclusive of this ConnectivityConstraint.  # noqa: E501
        :type is_exclusive: bool
        :param requested_capacity: The requested_capacity of this ConnectivityConstraint.  # noqa: E501
        :type requested_capacity: Capacity
        :param schedule: The schedule of this ConnectivityConstraint.  # noqa: E501
        :type schedule: TimeRange
        :param cost_characteristic: The cost_characteristic of this ConnectivityConstraint.  # noqa: E501
        :type cost_characteristic: List[CostCharacteristic]
        :param latency_characteristic: The latency_characteristic of this ConnectivityConstraint.  # noqa: E501
        :type latency_characteristic: List[LatencyCharacteristic]
        :param coroute_inclusion: The coroute_inclusion of this ConnectivityConstraint.  # noqa: E501
        :type coroute_inclusion: str
        :param diversity_exclusion: The diversity_exclusion of this ConnectivityConstraint.  # noqa: E501
        :type diversity_exclusion: List[str]
        """
        self.swagger_types = {
            'route_objective_function': str,
            'diversity_policy': str,
            'service_type': str,
            'service_level': str,
            'is_exclusive': bool,
            'requested_capacity': Capacity,
            'schedule': TimeRange,
            'cost_characteristic': List[CostCharacteristic],
            'latency_characteristic': List[LatencyCharacteristic],
            'coroute_inclusion': str,
            'diversity_exclusion': List[str]
        }

        self.attribute_map = {
            'route_objective_function': 'route-objective-function',
            'diversity_policy': 'diversity-policy',
            'service_type': 'service-type',
            'service_level': 'service-level',
            'is_exclusive': 'is-exclusive',
            'requested_capacity': 'requested-capacity',
            'schedule': 'schedule',
            'cost_characteristic': 'cost-characteristic',
            'latency_characteristic': 'latency-characteristic',
            'coroute_inclusion': 'coroute-inclusion',
            'diversity_exclusion': 'diversity-exclusion'
        }

        self._route_objective_function = route_objective_function
        self._diversity_policy = diversity_policy
        self._service_type = service_type
        self._service_level = service_level
        self._is_exclusive = is_exclusive
        self._requested_capacity = requested_capacity
        self._schedule = schedule
        self._cost_characteristic = cost_characteristic
        self._latency_characteristic = latency_characteristic
        self._coroute_inclusion = coroute_inclusion
        self._diversity_exclusion = diversity_exclusion

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectivityConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The connectivity-constraint of this ConnectivityConstraint.  # noqa: E501
        :rtype: ConnectivityConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def route_objective_function(self) -> str:
        """Gets the route_objective_function of this ConnectivityConstraint.


        :return: The route_objective_function of this ConnectivityConstraint.
        :rtype: str
        """
        return self._route_objective_function

    @route_objective_function.setter
    def route_objective_function(self, route_objective_function: str):
        """Sets the route_objective_function of this ConnectivityConstraint.


        :param route_objective_function: The route_objective_function of this ConnectivityConstraint.
        :type route_objective_function: str
        """
        allowed_values = ["MIN_WORK_ROUTE_HOP", "MIN_WORK_ROUTE_COST", "MIN_WORK_ROUTE_LATENCY", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_HOP", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_COST", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_LATENCY", "LOAD_BALANCE_MAX_UNUSED_CAPACITY"]  # noqa: E501
        if route_objective_function not in allowed_values:
            raise ValueError(
                "Invalid value for `route_objective_function` ({0}), must be one of {1}"
                .format(route_objective_function, allowed_values)
            )

        self._route_objective_function = route_objective_function

    @property
    def diversity_policy(self) -> str:
        """Gets the diversity_policy of this ConnectivityConstraint.


        :return: The diversity_policy of this ConnectivityConstraint.
        :rtype: str
        """
        return self._diversity_policy

    @diversity_policy.setter
    def diversity_policy(self, diversity_policy: str):
        """Sets the diversity_policy of this ConnectivityConstraint.


        :param diversity_policy: The diversity_policy of this ConnectivityConstraint.
        :type diversity_policy: str
        """
        allowed_values = ["SRLG", "SRNG", "SNG", "NODE", "LINK"]  # noqa: E501
        if diversity_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `diversity_policy` ({0}), must be one of {1}"
                .format(diversity_policy, allowed_values)
            )

        self._diversity_policy = diversity_policy

    @property
    def service_type(self) -> str:
        """Gets the service_type of this ConnectivityConstraint.


        :return: The service_type of this ConnectivityConstraint.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type: str):
        """Sets the service_type of this ConnectivityConstraint.


        :param service_type: The service_type of this ConnectivityConstraint.
        :type service_type: str
        """
        allowed_values = ["POINT_TO_POINT_CONNECTIVITY", "POINT_TO_MULTIPOINT_CONNECTIVITY", "MULTIPOINT_CONNECTIVITY", "ROOTED_MULTIPOINT_CONNECTIVITY"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def service_level(self) -> str:
        """Gets the service_level of this ConnectivityConstraint.

        An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability  # noqa: E501

        :return: The service_level of this ConnectivityConstraint.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level: str):
        """Sets the service_level of this ConnectivityConstraint.

        An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability  # noqa: E501

        :param service_level: The service_level of this ConnectivityConstraint.
        :type service_level: str
        """

        self._service_level = service_level

    @property
    def is_exclusive(self) -> bool:
        """Gets the is_exclusive of this ConnectivityConstraint.

        To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive=true) and EVPL (isExclusive=false), or between EPLAN (isExclusive=true) and EVPLAN (isExclusive=false)  # noqa: E501

        :return: The is_exclusive of this ConnectivityConstraint.
        :rtype: bool
        """
        return self._is_exclusive

    @is_exclusive.setter
    def is_exclusive(self, is_exclusive: bool):
        """Sets the is_exclusive of this ConnectivityConstraint.

        To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive=true) and EVPL (isExclusive=false), or between EPLAN (isExclusive=true) and EVPLAN (isExclusive=false)  # noqa: E501

        :param is_exclusive: The is_exclusive of this ConnectivityConstraint.
        :type is_exclusive: bool
        """

        self._is_exclusive = is_exclusive

    @property
    def requested_capacity(self) -> Capacity:
        """Gets the requested_capacity of this ConnectivityConstraint.


        :return: The requested_capacity of this ConnectivityConstraint.
        :rtype: Capacity
        """
        return self._requested_capacity

    @requested_capacity.setter
    def requested_capacity(self, requested_capacity: Capacity):
        """Sets the requested_capacity of this ConnectivityConstraint.


        :param requested_capacity: The requested_capacity of this ConnectivityConstraint.
        :type requested_capacity: Capacity
        """

        self._requested_capacity = requested_capacity

    @property
    def schedule(self) -> TimeRange:
        """Gets the schedule of this ConnectivityConstraint.


        :return: The schedule of this ConnectivityConstraint.
        :rtype: TimeRange
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: TimeRange):
        """Sets the schedule of this ConnectivityConstraint.


        :param schedule: The schedule of this ConnectivityConstraint.
        :type schedule: TimeRange
        """

        self._schedule = schedule

    @property
    def cost_characteristic(self) -> List[CostCharacteristic]:
        """Gets the cost_characteristic of this ConnectivityConstraint.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :return: The cost_characteristic of this ConnectivityConstraint.
        :rtype: List[CostCharacteristic]
        """
        return self._cost_characteristic

    @cost_characteristic.setter
    def cost_characteristic(self, cost_characteristic: List[CostCharacteristic]):
        """Sets the cost_characteristic of this ConnectivityConstraint.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :param cost_characteristic: The cost_characteristic of this ConnectivityConstraint.
        :type cost_characteristic: List[CostCharacteristic]
        """

        self._cost_characteristic = cost_characteristic

    @property
    def latency_characteristic(self) -> List[LatencyCharacteristic]:
        """Gets the latency_characteristic of this ConnectivityConstraint.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :return: The latency_characteristic of this ConnectivityConstraint.
        :rtype: List[LatencyCharacteristic]
        """
        return self._latency_characteristic

    @latency_characteristic.setter
    def latency_characteristic(self, latency_characteristic: List[LatencyCharacteristic]):
        """Sets the latency_characteristic of this ConnectivityConstraint.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :param latency_characteristic: The latency_characteristic of this ConnectivityConstraint.
        :type latency_characteristic: List[LatencyCharacteristic]
        """

        self._latency_characteristic = latency_characteristic

    @property
    def coroute_inclusion(self) -> str:
        """Gets the coroute_inclusion of this ConnectivityConstraint.


        :return: The coroute_inclusion of this ConnectivityConstraint.
        :rtype: str
        """
        return self._coroute_inclusion

    @coroute_inclusion.setter
    def coroute_inclusion(self, coroute_inclusion: str):
        """Sets the coroute_inclusion of this ConnectivityConstraint.


        :param coroute_inclusion: The coroute_inclusion of this ConnectivityConstraint.
        :type coroute_inclusion: str
        """

        self._coroute_inclusion = coroute_inclusion

    @property
    def diversity_exclusion(self) -> List[str]:
        """Gets the diversity_exclusion of this ConnectivityConstraint.


        :return: The diversity_exclusion of this ConnectivityConstraint.
        :rtype: List[str]
        """
        return self._diversity_exclusion

    @diversity_exclusion.setter
    def diversity_exclusion(self, diversity_exclusion: List[str]):
        """Sets the diversity_exclusion of this ConnectivityConstraint.


        :param diversity_exclusion: The diversity_exclusion of this ConnectivityConstraint.
        :type diversity_exclusion: List[str]
        """

        self._diversity_exclusion = diversity_exclusion
