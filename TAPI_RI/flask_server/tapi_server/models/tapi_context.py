# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.connection import Connection  # noqa: F401,E501
from tapi_server.models.connectivity_context import ConnectivityContext  # noqa: F401,E501
from tapi_server.models.connectivity_service import ConnectivityService  # noqa: F401,E501
from tapi_server.models.global_class import GlobalClass  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server.models.network_topology_service import NetworkTopologyService  # noqa: F401,E501
from tapi_server.models.path import Path  # noqa: F401,E501
from tapi_server.models.path_computation_context import PathComputationContext  # noqa: F401,E501
from tapi_server.models.path_computation_service import PathComputationService  # noqa: F401,E501
from tapi_server.models.service_interface_point import ServiceInterfacePoint  # noqa: F401,E501
from tapi_server.models.topology import Topology  # noqa: F401,E501
from tapi_server.models.topology_context import TopologyContext  # noqa: F401,E501
from tapi_server import util


class TapiContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, name: List[NameAndValue]=None, nw_topology_service: NetworkTopologyService=None, topology: List[Topology]=None, path_comp_service: List[PathComputationService]=None, path: List[Path]=None, connectivity_service: List[ConnectivityService]=None, connection: List[Connection]=None, service_interface_point: List[ServiceInterfacePoint]=None):  # noqa: E501
        """TapiContext - a model defined in Swagger

        :param uuid: The uuid of this TapiContext.  # noqa: E501
        :type uuid: str
        :param name: The name of this TapiContext.  # noqa: E501
        :type name: List[NameAndValue]
        :param nw_topology_service: The nw_topology_service of this TapiContext.  # noqa: E501
        :type nw_topology_service: NetworkTopologyService
        :param topology: The topology of this TapiContext.  # noqa: E501
        :type topology: List[Topology]
        :param path_comp_service: The path_comp_service of this TapiContext.  # noqa: E501
        :type path_comp_service: List[PathComputationService]
        :param path: The path of this TapiContext.  # noqa: E501
        :type path: List[Path]
        :param connectivity_service: The connectivity_service of this TapiContext.  # noqa: E501
        :type connectivity_service: List[ConnectivityService]
        :param connection: The connection of this TapiContext.  # noqa: E501
        :type connection: List[Connection]
        :param service_interface_point: The service_interface_point of this TapiContext.  # noqa: E501
        :type service_interface_point: List[ServiceInterfacePoint]
        """
        self.swagger_types = {
            'uuid': str,
            'name': List[NameAndValue],
            'nw_topology_service': NetworkTopologyService,
            'topology': List[Topology],
            'path_comp_service': List[PathComputationService],
            'path': List[Path],
            'connectivity_service': List[ConnectivityService],
            'connection': List[Connection],
            'service_interface_point': List[ServiceInterfacePoint]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'nw_topology_service': 'nw-topology-service',
            'topology': 'topology',
            'path_comp_service': 'path-comp-service',
            'path': 'path',
            'connectivity_service': 'connectivity-service',
            'connection': 'connection',
            'service_interface_point': 'service-interface-point'
        }

        self._uuid = uuid
        self._name = name
        self._nw_topology_service = nw_topology_service
        self._topology = topology
        self._path_comp_service = path_comp_service
        self._path = path
        self._connectivity_service = connectivity_service
        self._connection = connection
        self._service_interface_point = service_interface_point

    @classmethod
    def from_dict(cls, dikt) -> 'TapiContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi-context of this TapiContext.  # noqa: E501
        :rtype: TapiContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this TapiContext.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :return: The uuid of this TapiContext.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this TapiContext.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :param uuid: The uuid of this TapiContext.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this TapiContext.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this TapiContext.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this TapiContext.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this TapiContext.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def nw_topology_service(self) -> NetworkTopologyService:
        """Gets the nw_topology_service of this TapiContext.


        :return: The nw_topology_service of this TapiContext.
        :rtype: NetworkTopologyService
        """
        return self._nw_topology_service

    @nw_topology_service.setter
    def nw_topology_service(self, nw_topology_service: NetworkTopologyService):
        """Sets the nw_topology_service of this TapiContext.


        :param nw_topology_service: The nw_topology_service of this TapiContext.
        :type nw_topology_service: NetworkTopologyService
        """

        self._nw_topology_service = nw_topology_service

    @property
    def topology(self) -> List[Topology]:
        """Gets the topology of this TapiContext.


        :return: The topology of this TapiContext.
        :rtype: List[Topology]
        """
        return self._topology

    @topology.setter
    def topology(self, topology: List[Topology]):
        """Sets the topology of this TapiContext.


        :param topology: The topology of this TapiContext.
        :type topology: List[Topology]
        """

        self._topology = topology

    @property
    def path_comp_service(self) -> List[PathComputationService]:
        """Gets the path_comp_service of this TapiContext.


        :return: The path_comp_service of this TapiContext.
        :rtype: List[PathComputationService]
        """
        return self._path_comp_service

    @path_comp_service.setter
    def path_comp_service(self, path_comp_service: List[PathComputationService]):
        """Sets the path_comp_service of this TapiContext.


        :param path_comp_service: The path_comp_service of this TapiContext.
        :type path_comp_service: List[PathComputationService]
        """

        self._path_comp_service = path_comp_service

    @property
    def path(self) -> List[Path]:
        """Gets the path of this TapiContext.


        :return: The path of this TapiContext.
        :rtype: List[Path]
        """
        return self._path

    @path.setter
    def path(self, path: List[Path]):
        """Sets the path of this TapiContext.


        :param path: The path of this TapiContext.
        :type path: List[Path]
        """

        self._path = path

    @property
    def connectivity_service(self) -> List[ConnectivityService]:
        """Gets the connectivity_service of this TapiContext.


        :return: The connectivity_service of this TapiContext.
        :rtype: List[ConnectivityService]
        """
        return self._connectivity_service

    @connectivity_service.setter
    def connectivity_service(self, connectivity_service: List[ConnectivityService]):
        """Sets the connectivity_service of this TapiContext.


        :param connectivity_service: The connectivity_service of this TapiContext.
        :type connectivity_service: List[ConnectivityService]
        """

        self._connectivity_service = connectivity_service

    @property
    def connection(self) -> List[Connection]:
        """Gets the connection of this TapiContext.


        :return: The connection of this TapiContext.
        :rtype: List[Connection]
        """
        return self._connection

    @connection.setter
    def connection(self, connection: List[Connection]):
        """Sets the connection of this TapiContext.


        :param connection: The connection of this TapiContext.
        :type connection: List[Connection]
        """

        self._connection = connection

    @property
    def service_interface_point(self) -> List[ServiceInterfacePoint]:
        """Gets the service_interface_point of this TapiContext.


        :return: The service_interface_point of this TapiContext.
        :rtype: List[ServiceInterfacePoint]
        """
        return self._service_interface_point

    @service_interface_point.setter
    def service_interface_point(self, service_interface_point: List[ServiceInterfacePoint]):
        """Sets the service_interface_point of this TapiContext.


        :param service_interface_point: The service_interface_point of this TapiContext.
        :type service_interface_point: List[ServiceInterfacePoint]
        """

        self._service_interface_point = service_interface_point
