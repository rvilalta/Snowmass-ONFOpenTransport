# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.local_class import LocalClass  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server import util


class Switch(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, local_id: str=None, name: List[NameAndValue]=None, selected_connection_end_point: List[str]=None, selected_route: List[str]=None, selection_control: str=None, selection_reason: str=None, switch_direction: str=None):  # noqa: E501
        """Switch - a model defined in Swagger

        :param local_id: The local_id of this Switch.  # noqa: E501
        :type local_id: str
        :param name: The name of this Switch.  # noqa: E501
        :type name: List[NameAndValue]
        :param selected_connection_end_point: The selected_connection_end_point of this Switch.  # noqa: E501
        :type selected_connection_end_point: List[str]
        :param selected_route: The selected_route of this Switch.  # noqa: E501
        :type selected_route: List[str]
        :param selection_control: The selection_control of this Switch.  # noqa: E501
        :type selection_control: str
        :param selection_reason: The selection_reason of this Switch.  # noqa: E501
        :type selection_reason: str
        :param switch_direction: The switch_direction of this Switch.  # noqa: E501
        :type switch_direction: str
        """
        self.swagger_types = {
            'local_id': str,
            'name': List[NameAndValue],
            'selected_connection_end_point': List[str],
            'selected_route': List[str],
            'selection_control': str,
            'selection_reason': str,
            'switch_direction': str
        }

        self.attribute_map = {
            'local_id': 'local-id',
            'name': 'name',
            'selected_connection_end_point': 'selected-connection-end-point',
            'selected_route': 'selected-route',
            'selection_control': 'selection-control',
            'selection_reason': 'selection-reason',
            'switch_direction': 'switch-direction'
        }

        self._local_id = local_id
        self._name = name
        self._selected_connection_end_point = selected_connection_end_point
        self._selected_route = selected_route
        self._selection_control = selection_control
        self._selection_reason = selection_reason
        self._switch_direction = switch_direction

    @classmethod
    def from_dict(cls, dikt) -> 'Switch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The switch of this Switch.  # noqa: E501
        :rtype: Switch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_id(self) -> str:
        """Gets the local_id of this Switch.


        :return: The local_id of this Switch.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id: str):
        """Sets the local_id of this Switch.


        :param local_id: The local_id of this Switch.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this Switch.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this Switch.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this Switch.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this Switch.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def selected_connection_end_point(self) -> List[str]:
        """Gets the selected_connection_end_point of this Switch.


        :return: The selected_connection_end_point of this Switch.
        :rtype: List[str]
        """
        return self._selected_connection_end_point

    @selected_connection_end_point.setter
    def selected_connection_end_point(self, selected_connection_end_point: List[str]):
        """Sets the selected_connection_end_point of this Switch.


        :param selected_connection_end_point: The selected_connection_end_point of this Switch.
        :type selected_connection_end_point: List[str]
        """

        self._selected_connection_end_point = selected_connection_end_point

    @property
    def selected_route(self) -> List[str]:
        """Gets the selected_route of this Switch.


        :return: The selected_route of this Switch.
        :rtype: List[str]
        """
        return self._selected_route

    @selected_route.setter
    def selected_route(self, selected_route: List[str]):
        """Sets the selected_route of this Switch.


        :param selected_route: The selected_route of this Switch.
        :type selected_route: List[str]
        """

        self._selected_route = selected_route

    @property
    def selection_control(self) -> str:
        """Gets the selection_control of this Switch.

        Degree of administrative control applied to the switch selection.  # noqa: E501

        :return: The selection_control of this Switch.
        :rtype: str
        """
        return self._selection_control

    @selection_control.setter
    def selection_control(self, selection_control: str):
        """Sets the selection_control of this Switch.

        Degree of administrative control applied to the switch selection.  # noqa: E501

        :param selection_control: The selection_control of this Switch.
        :type selection_control: str
        """
        allowed_values = ["LOCK_OUT", "NORMAL", "MANUAL", "FORCED"]  # noqa: E501
        if selection_control not in allowed_values:
            raise ValueError(
                "Invalid value for `selection_control` ({0}), must be one of {1}"
                .format(selection_control, allowed_values)
            )

        self._selection_control = selection_control

    @property
    def selection_reason(self) -> str:
        """Gets the selection_reason of this Switch.

        The reason for the current switch selection.  # noqa: E501

        :return: The selection_reason of this Switch.
        :rtype: str
        """
        return self._selection_reason

    @selection_reason.setter
    def selection_reason(self, selection_reason: str):
        """Sets the selection_reason of this Switch.

        The reason for the current switch selection.  # noqa: E501

        :param selection_reason: The selection_reason of this Switch.
        :type selection_reason: str
        """
        allowed_values = ["LOCKOUT", "NORMAL", "MANUAL", "FORCED", "WAIT_TO_REVERT", "SIGNAL_DEGRADE", "SIGNAL_FAIL"]  # noqa: E501
        if selection_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `selection_reason` ({0}), must be one of {1}"
                .format(selection_reason, allowed_values)
            )

        self._selection_reason = selection_reason

    @property
    def switch_direction(self) -> str:
        """Gets the switch_direction of this Switch.

        Indicates whether the switch selects from ingress to the FC or to egress of the FC, or both.  # noqa: E501

        :return: The switch_direction of this Switch.
        :rtype: str
        """
        return self._switch_direction

    @switch_direction.setter
    def switch_direction(self, switch_direction: str):
        """Sets the switch_direction of this Switch.

        Indicates whether the switch selects from ingress to the FC or to egress of the FC, or both.  # noqa: E501

        :param switch_direction: The switch_direction of this Switch.
        :type switch_direction: str
        """
        allowed_values = ["BIDIRECTIONAL", "INPUT", "OUTPUT", "UNIDENTIFIED_OR_UNKNOWN"]  # noqa: E501
        if switch_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `switch_direction` ({0}), must be one of {1}"
                .format(switch_direction, allowed_values)
            )

        self._switch_direction = switch_direction
