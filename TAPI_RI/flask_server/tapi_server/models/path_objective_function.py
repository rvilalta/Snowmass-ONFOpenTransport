# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.local_class import LocalClass  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server import util


class PathObjectiveFunction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, local_id: str=None, name: List[NameAndValue]=None, bandwidth_optimization: str=None, concurrent_paths: str=None, cost_optimization: str=None, link_utilization: str=None, resource_sharing: str=None):  # noqa: E501
        """PathObjectiveFunction - a model defined in Swagger

        :param local_id: The local_id of this PathObjectiveFunction.  # noqa: E501
        :type local_id: str
        :param name: The name of this PathObjectiveFunction.  # noqa: E501
        :type name: List[NameAndValue]
        :param bandwidth_optimization: The bandwidth_optimization of this PathObjectiveFunction.  # noqa: E501
        :type bandwidth_optimization: str
        :param concurrent_paths: The concurrent_paths of this PathObjectiveFunction.  # noqa: E501
        :type concurrent_paths: str
        :param cost_optimization: The cost_optimization of this PathObjectiveFunction.  # noqa: E501
        :type cost_optimization: str
        :param link_utilization: The link_utilization of this PathObjectiveFunction.  # noqa: E501
        :type link_utilization: str
        :param resource_sharing: The resource_sharing of this PathObjectiveFunction.  # noqa: E501
        :type resource_sharing: str
        """
        self.swagger_types = {
            'local_id': str,
            'name': List[NameAndValue],
            'bandwidth_optimization': str,
            'concurrent_paths': str,
            'cost_optimization': str,
            'link_utilization': str,
            'resource_sharing': str
        }

        self.attribute_map = {
            'local_id': 'local-id',
            'name': 'name',
            'bandwidth_optimization': 'bandwidth-optimization',
            'concurrent_paths': 'concurrent-paths',
            'cost_optimization': 'cost-optimization',
            'link_utilization': 'link-utilization',
            'resource_sharing': 'resource-sharing'
        }

        self._local_id = local_id
        self._name = name
        self._bandwidth_optimization = bandwidth_optimization
        self._concurrent_paths = concurrent_paths
        self._cost_optimization = cost_optimization
        self._link_utilization = link_utilization
        self._resource_sharing = resource_sharing

    @classmethod
    def from_dict(cls, dikt) -> 'PathObjectiveFunction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The path-objective-function of this PathObjectiveFunction.  # noqa: E501
        :rtype: PathObjectiveFunction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_id(self) -> str:
        """Gets the local_id of this PathObjectiveFunction.


        :return: The local_id of this PathObjectiveFunction.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id: str):
        """Sets the local_id of this PathObjectiveFunction.


        :param local_id: The local_id of this PathObjectiveFunction.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this PathObjectiveFunction.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this PathObjectiveFunction.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this PathObjectiveFunction.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this PathObjectiveFunction.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def bandwidth_optimization(self) -> str:
        """Gets the bandwidth_optimization of this PathObjectiveFunction.


        :return: The bandwidth_optimization of this PathObjectiveFunction.
        :rtype: str
        """
        return self._bandwidth_optimization

    @bandwidth_optimization.setter
    def bandwidth_optimization(self, bandwidth_optimization: str):
        """Sets the bandwidth_optimization of this PathObjectiveFunction.


        :param bandwidth_optimization: The bandwidth_optimization of this PathObjectiveFunction.
        :type bandwidth_optimization: str
        """

        self._bandwidth_optimization = bandwidth_optimization

    @property
    def concurrent_paths(self) -> str:
        """Gets the concurrent_paths of this PathObjectiveFunction.


        :return: The concurrent_paths of this PathObjectiveFunction.
        :rtype: str
        """
        return self._concurrent_paths

    @concurrent_paths.setter
    def concurrent_paths(self, concurrent_paths: str):
        """Sets the concurrent_paths of this PathObjectiveFunction.


        :param concurrent_paths: The concurrent_paths of this PathObjectiveFunction.
        :type concurrent_paths: str
        """

        self._concurrent_paths = concurrent_paths

    @property
    def cost_optimization(self) -> str:
        """Gets the cost_optimization of this PathObjectiveFunction.


        :return: The cost_optimization of this PathObjectiveFunction.
        :rtype: str
        """
        return self._cost_optimization

    @cost_optimization.setter
    def cost_optimization(self, cost_optimization: str):
        """Sets the cost_optimization of this PathObjectiveFunction.


        :param cost_optimization: The cost_optimization of this PathObjectiveFunction.
        :type cost_optimization: str
        """

        self._cost_optimization = cost_optimization

    @property
    def link_utilization(self) -> str:
        """Gets the link_utilization of this PathObjectiveFunction.


        :return: The link_utilization of this PathObjectiveFunction.
        :rtype: str
        """
        return self._link_utilization

    @link_utilization.setter
    def link_utilization(self, link_utilization: str):
        """Sets the link_utilization of this PathObjectiveFunction.


        :param link_utilization: The link_utilization of this PathObjectiveFunction.
        :type link_utilization: str
        """

        self._link_utilization = link_utilization

    @property
    def resource_sharing(self) -> str:
        """Gets the resource_sharing of this PathObjectiveFunction.


        :return: The resource_sharing of this PathObjectiveFunction.
        :rtype: str
        """
        return self._resource_sharing

    @resource_sharing.setter
    def resource_sharing(self, resource_sharing: str):
        """Sets the resource_sharing of this PathObjectiveFunction.


        :param resource_sharing: The resource_sharing of this PathObjectiveFunction.
        :type resource_sharing: str
        """

        self._resource_sharing = resource_sharing
