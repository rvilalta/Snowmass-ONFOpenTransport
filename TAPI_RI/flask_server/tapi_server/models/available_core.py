# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.frequency_slot import FrequencySlot
from tapi_server import util


class AvailableCore(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, core_id: str=None, available_frequency_slot: List[FrequencySlot]=None, occupied_frequency_slot: List[FrequencySlot]=None ):  # noqa: E501
        """AvailableCore - a model defined in Swagger

        :param available_core: The available_core of this NodeEdgePoint.  # noqa: E501
        :type available_core: List[AvailableCore]
        :param available_transceiver: The available_transceiver of this NodeEdgePoint.  # noqa: E501
        :type available_transceiver: AvailableTransceiver
        """
        self.swagger_types = {
            'core_id': str,
            'available_frequency_slot': List[FrequencySlot],
            'occupied_frequency_slot': List[FrequencySlot]
        }

        self.attribute_map = {
            'core_id': 'core-id',
            'available_frequency_slot': 'available-frequency-slot',
            'occupied_frequency_slot': 'occupied-frequency-slot'
        }

        self._core_id = core_id
        self._available_frequency_slot = available_frequency_slot
        self._occupied_frequency_slot = occupied_frequency_slot

    @classmethod
    def from_dict(cls, dikt) -> 'AvailableCore':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The node-edge-point of this NodeEdgePoint.  # noqa: E501
        :rtype: NodeEdgePoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def core_id(self) -> str:
        """Gets the available_transceiver of this NodeEdgePoint.

        :return: The available_transceiver of this NodeEdgePoint.
        :rtype: AvailableTransceiver
        """
        return self._core_id

    @core_id.setter
    def core_id(self, core_id: str):
        """Sets the available_transceiver of this NodeEdgePoint.

        :param available_transceiver: The available_transceiver of this NodeEdgePoint.
        :type available_transceiver: AvailableTransceiver
        """

        self._core_id = core_id

   
    @property
    def available_frequency_slot(self) -> List[FrequencySlot]:
        """Gets the available_core of this NodeEdgePoint.

        List of available_core. 
        :return: The available_core of this NodeEdgePoint.
        :rtype: List[AvailableCore]
        """
        return self._available_frequency_slot

    @available_frequency_slot.setter
    def available_frequency_slot(self, available_frequency_slot: List[FrequencySlot]):
        """Sets the available_core of this NodeEdgePoint.

        List of AvailableCore. 
        
        :param name: The available_core of this NodeEdgePoint.
        :type name: List[AvailableCore]
        """

        self._available_frequency_slot = available_frequency_slot

    @property
    def occupied_frequency_slot(self) -> List[FrequencySlot]:
        """Gets the available_core of this NodeEdgePoint.

        List of available_core. 
        :return: The available_core of this NodeEdgePoint.
        :rtype: List[AvailableCore]
        """
        return self._occupied_frequency_slot

    @occupied_frequency_slot.setter
    def occupied_frequency_slot(self, occupied_frequency_slot: List[FrequencySlot]):
        """Sets the available_core of this NodeEdgePoint.

        List of AvailableCore. 
        
        :param name: The available_core of this NodeEdgePoint.
        :type name: List[AvailableCore]
        """

        self._occupied_frequency_slot = occupied_frequency_slot

