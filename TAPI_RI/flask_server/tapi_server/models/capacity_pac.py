# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.capacity import Capacity  # noqa: F401,E501
from tapi_server import util


class CapacityPac(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, total_potential_capacity: Capacity=None, available_capacity: Capacity=None):  # noqa: E501
        """CapacityPac - a model defined in Swagger

        :param total_potential_capacity: The total_potential_capacity of this CapacityPac.  # noqa: E501
        :type total_potential_capacity: Capacity
        :param available_capacity: The available_capacity of this CapacityPac.  # noqa: E501
        :type available_capacity: Capacity
        """
        self.swagger_types = {
            'total_potential_capacity': Capacity,
            'available_capacity': Capacity
        }

        self.attribute_map = {
            'total_potential_capacity': 'total-potential-capacity',
            'available_capacity': 'available-capacity'
        }

        self._total_potential_capacity = total_potential_capacity
        self._available_capacity = available_capacity

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The capacity-pac of this CapacityPac.  # noqa: E501
        :rtype: CapacityPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_potential_capacity(self) -> Capacity:
        """Gets the total_potential_capacity of this CapacityPac.

        An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.  # noqa: E501

        :return: The total_potential_capacity of this CapacityPac.
        :rtype: Capacity
        """
        return self._total_potential_capacity

    @total_potential_capacity.setter
    def total_potential_capacity(self, total_potential_capacity: Capacity):
        """Sets the total_potential_capacity of this CapacityPac.

        An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.  # noqa: E501

        :param total_potential_capacity: The total_potential_capacity of this CapacityPac.
        :type total_potential_capacity: Capacity
        """

        self._total_potential_capacity = total_potential_capacity

    @property
    def available_capacity(self) -> Capacity:
        """Gets the available_capacity of this CapacityPac.

        Capacity available to be assigned.  # noqa: E501

        :return: The available_capacity of this CapacityPac.
        :rtype: Capacity
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity: Capacity):
        """Sets the available_capacity of this CapacityPac.

        Capacity available to be assigned.  # noqa: E501

        :param available_capacity: The available_capacity of this CapacityPac.
        :type available_capacity: Capacity
        """

        self._available_capacity = available_capacity
