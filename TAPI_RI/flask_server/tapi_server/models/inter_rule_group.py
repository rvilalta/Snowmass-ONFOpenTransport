# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.capacity import Capacity  # noqa: F401,E501
from tapi_server.models.capacity_pac import CapacityPac  # noqa: F401,E501
from tapi_server.models.cost_characteristic import CostCharacteristic  # noqa: F401,E501
from tapi_server.models.latency_characteristic import LatencyCharacteristic  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server.models.resource_spec import ResourceSpec  # noqa: F401,E501
from tapi_server.models.risk_characteristic import RiskCharacteristic  # noqa: F401,E501
from tapi_server.models.risk_parameter_pac import RiskParameterPac  # noqa: F401,E501
from tapi_server.models.rule import Rule  # noqa: F401,E501
from tapi_server.models.transfer_cost_pac import TransferCostPac  # noqa: F401,E501
from tapi_server.models.transfer_timing_pac import TransferTimingPac  # noqa: F401,E501
from tapi_server import util


class InterRuleGroup(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, name: List[NameAndValue]=None, total_potential_capacity: Capacity=None, available_capacity: Capacity=None, cost_characteristic: List[CostCharacteristic]=None, latency_characteristic: List[LatencyCharacteristic]=None, risk_characteristic: List[RiskCharacteristic]=None, rule: List[Rule]=None, associated_node_rule_group: List[str]=None):  # noqa: E501
        """InterRuleGroup - a model defined in Swagger

        :param uuid: The uuid of this InterRuleGroup.  # noqa: E501
        :type uuid: str
        :param name: The name of this InterRuleGroup.  # noqa: E501
        :type name: List[NameAndValue]
        :param total_potential_capacity: The total_potential_capacity of this InterRuleGroup.  # noqa: E501
        :type total_potential_capacity: Capacity
        :param available_capacity: The available_capacity of this InterRuleGroup.  # noqa: E501
        :type available_capacity: Capacity
        :param cost_characteristic: The cost_characteristic of this InterRuleGroup.  # noqa: E501
        :type cost_characteristic: List[CostCharacteristic]
        :param latency_characteristic: The latency_characteristic of this InterRuleGroup.  # noqa: E501
        :type latency_characteristic: List[LatencyCharacteristic]
        :param risk_characteristic: The risk_characteristic of this InterRuleGroup.  # noqa: E501
        :type risk_characteristic: List[RiskCharacteristic]
        :param rule: The rule of this InterRuleGroup.  # noqa: E501
        :type rule: List[Rule]
        :param associated_node_rule_group: The associated_node_rule_group of this InterRuleGroup.  # noqa: E501
        :type associated_node_rule_group: List[str]
        """
        self.swagger_types = {
            'uuid': str,
            'name': List[NameAndValue],
            'total_potential_capacity': Capacity,
            'available_capacity': Capacity,
            'cost_characteristic': List[CostCharacteristic],
            'latency_characteristic': List[LatencyCharacteristic],
            'risk_characteristic': List[RiskCharacteristic],
            'rule': List[Rule],
            'associated_node_rule_group': List[str]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'total_potential_capacity': 'total-potential-capacity',
            'available_capacity': 'available-capacity',
            'cost_characteristic': 'cost-characteristic',
            'latency_characteristic': 'latency-characteristic',
            'risk_characteristic': 'risk-characteristic',
            'rule': 'rule',
            'associated_node_rule_group': 'associated-node-rule-group'
        }

        self._uuid = uuid
        self._name = name
        self._total_potential_capacity = total_potential_capacity
        self._available_capacity = available_capacity
        self._cost_characteristic = cost_characteristic
        self._latency_characteristic = latency_characteristic
        self._risk_characteristic = risk_characteristic
        self._rule = rule
        self._associated_node_rule_group = associated_node_rule_group

    @classmethod
    def from_dict(cls, dikt) -> 'InterRuleGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inter-rule-group of this InterRuleGroup.  # noqa: E501
        :rtype: InterRuleGroup
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this InterRuleGroup.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :return: The uuid of this InterRuleGroup.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this InterRuleGroup.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :param uuid: The uuid of this InterRuleGroup.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this InterRuleGroup.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this InterRuleGroup.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this InterRuleGroup.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this InterRuleGroup.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def total_potential_capacity(self) -> Capacity:
        """Gets the total_potential_capacity of this InterRuleGroup.

        An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.  # noqa: E501

        :return: The total_potential_capacity of this InterRuleGroup.
        :rtype: Capacity
        """
        return self._total_potential_capacity

    @total_potential_capacity.setter
    def total_potential_capacity(self, total_potential_capacity: Capacity):
        """Sets the total_potential_capacity of this InterRuleGroup.

        An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.  # noqa: E501

        :param total_potential_capacity: The total_potential_capacity of this InterRuleGroup.
        :type total_potential_capacity: Capacity
        """

        self._total_potential_capacity = total_potential_capacity

    @property
    def available_capacity(self) -> Capacity:
        """Gets the available_capacity of this InterRuleGroup.

        Capacity available to be assigned.  # noqa: E501

        :return: The available_capacity of this InterRuleGroup.
        :rtype: Capacity
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity: Capacity):
        """Sets the available_capacity of this InterRuleGroup.

        Capacity available to be assigned.  # noqa: E501

        :param available_capacity: The available_capacity of this InterRuleGroup.
        :type available_capacity: Capacity
        """

        self._available_capacity = available_capacity

    @property
    def cost_characteristic(self) -> List[CostCharacteristic]:
        """Gets the cost_characteristic of this InterRuleGroup.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :return: The cost_characteristic of this InterRuleGroup.
        :rtype: List[CostCharacteristic]
        """
        return self._cost_characteristic

    @cost_characteristic.setter
    def cost_characteristic(self, cost_characteristic: List[CostCharacteristic]):
        """Sets the cost_characteristic of this InterRuleGroup.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :param cost_characteristic: The cost_characteristic of this InterRuleGroup.
        :type cost_characteristic: List[CostCharacteristic]
        """

        self._cost_characteristic = cost_characteristic

    @property
    def latency_characteristic(self) -> List[LatencyCharacteristic]:
        """Gets the latency_characteristic of this InterRuleGroup.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :return: The latency_characteristic of this InterRuleGroup.
        :rtype: List[LatencyCharacteristic]
        """
        return self._latency_characteristic

    @latency_characteristic.setter
    def latency_characteristic(self, latency_characteristic: List[LatencyCharacteristic]):
        """Sets the latency_characteristic of this InterRuleGroup.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :param latency_characteristic: The latency_characteristic of this InterRuleGroup.
        :type latency_characteristic: List[LatencyCharacteristic]
        """

        self._latency_characteristic = latency_characteristic

    @property
    def risk_characteristic(self) -> List[RiskCharacteristic]:
        """Gets the risk_characteristic of this InterRuleGroup.

        A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.  # noqa: E501

        :return: The risk_characteristic of this InterRuleGroup.
        :rtype: List[RiskCharacteristic]
        """
        return self._risk_characteristic

    @risk_characteristic.setter
    def risk_characteristic(self, risk_characteristic: List[RiskCharacteristic]):
        """Sets the risk_characteristic of this InterRuleGroup.

        A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.  # noqa: E501

        :param risk_characteristic: The risk_characteristic of this InterRuleGroup.
        :type risk_characteristic: List[RiskCharacteristic]
        """

        self._risk_characteristic = risk_characteristic

    @property
    def rule(self) -> List[Rule]:
        """Gets the rule of this InterRuleGroup.


        :return: The rule of this InterRuleGroup.
        :rtype: List[Rule]
        """
        return self._rule

    @rule.setter
    def rule(self, rule: List[Rule]):
        """Sets the rule of this InterRuleGroup.


        :param rule: The rule of this InterRuleGroup.
        :type rule: List[Rule]
        """

        self._rule = rule

    @property
    def associated_node_rule_group(self) -> List[str]:
        """Gets the associated_node_rule_group of this InterRuleGroup.


        :return: The associated_node_rule_group of this InterRuleGroup.
        :rtype: List[str]
        """
        return self._associated_node_rule_group

    @associated_node_rule_group.setter
    def associated_node_rule_group(self, associated_node_rule_group: List[str]):
        """Sets the associated_node_rule_group of this InterRuleGroup.


        :param associated_node_rule_group: The associated_node_rule_group of this InterRuleGroup.
        :type associated_node_rule_group: List[str]
        """

        self._associated_node_rule_group = associated_node_rule_group
