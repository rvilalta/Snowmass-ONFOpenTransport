# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.capacity import Capacity  # noqa: F401,E501
from tapi_server.models.cost_characteristic import CostCharacteristic  # noqa: F401,E501
from tapi_server.models.latency_characteristic import LatencyCharacteristic  # noqa: F401,E501
from tapi_server.models.local_class import LocalClass  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server import util


class RoutingConstraint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, local_id: str=None, name: List[NameAndValue]=None, requested_capacity: Capacity=None, service_level: str=None, path_layer: List[str]=None, cost_characteristic: List[CostCharacteristic]=None, latency_characteristic: List[LatencyCharacteristic]=None, include_topology: List[str]=None, avoid_topology: List[str]=None):  # noqa: E501
        """RoutingConstraint - a model defined in Swagger

        :param local_id: The local_id of this RoutingConstraint.  # noqa: E501
        :type local_id: str
        :param name: The name of this RoutingConstraint.  # noqa: E501
        :type name: List[NameAndValue]
        :param requested_capacity: The requested_capacity of this RoutingConstraint.  # noqa: E501
        :type requested_capacity: Capacity
        :param service_level: The service_level of this RoutingConstraint.  # noqa: E501
        :type service_level: str
        :param path_layer: The path_layer of this RoutingConstraint.  # noqa: E501
        :type path_layer: List[str]
        :param cost_characteristic: The cost_characteristic of this RoutingConstraint.  # noqa: E501
        :type cost_characteristic: List[CostCharacteristic]
        :param latency_characteristic: The latency_characteristic of this RoutingConstraint.  # noqa: E501
        :type latency_characteristic: List[LatencyCharacteristic]
        :param include_topology: The include_topology of this RoutingConstraint.  # noqa: E501
        :type include_topology: List[str]
        :param avoid_topology: The avoid_topology of this RoutingConstraint.  # noqa: E501
        :type avoid_topology: List[str]
        """
        self.swagger_types = {
            'local_id': str,
            'name': List[NameAndValue],
            'requested_capacity': Capacity,
            'service_level': str,
            'path_layer': List[str],
            'cost_characteristic': List[CostCharacteristic],
            'latency_characteristic': List[LatencyCharacteristic],
            'include_topology': List[str],
            'avoid_topology': List[str]
        }

        self.attribute_map = {
            'local_id': 'local-id',
            'name': 'name',
            'requested_capacity': 'requested-capacity',
            'service_level': 'service-level',
            'path_layer': 'path-layer',
            'cost_characteristic': 'cost-characteristic',
            'latency_characteristic': 'latency-characteristic',
            'include_topology': 'include-topology',
            'avoid_topology': 'avoid-topology'
        }

        self._local_id = local_id
        self._name = name
        self._requested_capacity = requested_capacity
        self._service_level = service_level
        self._path_layer = path_layer
        self._cost_characteristic = cost_characteristic
        self._latency_characteristic = latency_characteristic
        self._include_topology = include_topology
        self._avoid_topology = avoid_topology

    @classmethod
    def from_dict(cls, dikt) -> 'RoutingConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The routing-constraint of this RoutingConstraint.  # noqa: E501
        :rtype: RoutingConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_id(self) -> str:
        """Gets the local_id of this RoutingConstraint.


        :return: The local_id of this RoutingConstraint.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id: str):
        """Sets the local_id of this RoutingConstraint.


        :param local_id: The local_id of this RoutingConstraint.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this RoutingConstraint.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this RoutingConstraint.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this RoutingConstraint.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this RoutingConstraint.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def requested_capacity(self) -> Capacity:
        """Gets the requested_capacity of this RoutingConstraint.


        :return: The requested_capacity of this RoutingConstraint.
        :rtype: Capacity
        """
        return self._requested_capacity

    @requested_capacity.setter
    def requested_capacity(self, requested_capacity: Capacity):
        """Sets the requested_capacity of this RoutingConstraint.


        :param requested_capacity: The requested_capacity of this RoutingConstraint.
        :type requested_capacity: Capacity
        """

        self._requested_capacity = requested_capacity

    @property
    def service_level(self) -> str:
        """Gets the service_level of this RoutingConstraint.

        An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability  # noqa: E501

        :return: The service_level of this RoutingConstraint.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level: str):
        """Sets the service_level of this RoutingConstraint.

        An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability  # noqa: E501

        :param service_level: The service_level of this RoutingConstraint.
        :type service_level: str
        """

        self._service_level = service_level

    @property
    def path_layer(self) -> List[str]:
        """Gets the path_layer of this RoutingConstraint.


        :return: The path_layer of this RoutingConstraint.
        :rtype: List[str]
        """
        return self._path_layer

    @path_layer.setter
    def path_layer(self, path_layer: List[str]):
        """Sets the path_layer of this RoutingConstraint.


        :param path_layer: The path_layer of this RoutingConstraint.
        :type path_layer: List[str]
        """
        allowed_values = ["OTSiA", "OCH", "OTU", "ODU", "ETH", "ETY", "DSR"]  # noqa: E501
        if not set(path_layer).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `path_layer` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(path_layer) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._path_layer = path_layer

    @property
    def cost_characteristic(self) -> List[CostCharacteristic]:
        """Gets the cost_characteristic of this RoutingConstraint.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :return: The cost_characteristic of this RoutingConstraint.
        :rtype: List[CostCharacteristic]
        """
        return self._cost_characteristic

    @cost_characteristic.setter
    def cost_characteristic(self, cost_characteristic: List[CostCharacteristic]):
        """Sets the cost_characteristic of this RoutingConstraint.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :param cost_characteristic: The cost_characteristic of this RoutingConstraint.
        :type cost_characteristic: List[CostCharacteristic]
        """

        self._cost_characteristic = cost_characteristic

    @property
    def latency_characteristic(self) -> List[LatencyCharacteristic]:
        """Gets the latency_characteristic of this RoutingConstraint.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :return: The latency_characteristic of this RoutingConstraint.
        :rtype: List[LatencyCharacteristic]
        """
        return self._latency_characteristic

    @latency_characteristic.setter
    def latency_characteristic(self, latency_characteristic: List[LatencyCharacteristic]):
        """Sets the latency_characteristic of this RoutingConstraint.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :param latency_characteristic: The latency_characteristic of this RoutingConstraint.
        :type latency_characteristic: List[LatencyCharacteristic]
        """

        self._latency_characteristic = latency_characteristic

    @property
    def include_topology(self) -> List[str]:
        """Gets the include_topology of this RoutingConstraint.


        :return: The include_topology of this RoutingConstraint.
        :rtype: List[str]
        """
        return self._include_topology

    @include_topology.setter
    def include_topology(self, include_topology: List[str]):
        """Sets the include_topology of this RoutingConstraint.


        :param include_topology: The include_topology of this RoutingConstraint.
        :type include_topology: List[str]
        """

        self._include_topology = include_topology

    @property
    def avoid_topology(self) -> List[str]:
        """Gets the avoid_topology of this RoutingConstraint.


        :return: The avoid_topology of this RoutingConstraint.
        :rtype: List[str]
        """
        return self._avoid_topology

    @avoid_topology.setter
    def avoid_topology(self, avoid_topology: List[str]):
        """Sets the avoid_topology of this RoutingConstraint.


        :param avoid_topology: The avoid_topology of this RoutingConstraint.
        :type avoid_topology: List[str]
        """

        self._avoid_topology = avoid_topology
