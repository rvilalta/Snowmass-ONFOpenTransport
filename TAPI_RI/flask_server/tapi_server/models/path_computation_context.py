# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.path import Path  # noqa: F401,E501
from tapi_server.models.path_computation_service import PathComputationService  # noqa: F401,E501
from tapi_server import util


class PathComputationContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, path_comp_service: List[PathComputationService]=None, path: List[Path]=None):  # noqa: E501
        """PathComputationContext - a model defined in Swagger

        :param path_comp_service: The path_comp_service of this PathComputationContext.  # noqa: E501
        :type path_comp_service: List[PathComputationService]
        :param path: The path of this PathComputationContext.  # noqa: E501
        :type path: List[Path]
        """
        self.swagger_types = {
            'path_comp_service': List[PathComputationService],
            'path': List[Path]
        }

        self.attribute_map = {
            'path_comp_service': 'path-comp-service',
            'path': 'path'
        }

        self._path_comp_service = path_comp_service
        self._path = path

    @classmethod
    def from_dict(cls, dikt) -> 'PathComputationContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The path-computation-context of this PathComputationContext.  # noqa: E501
        :rtype: PathComputationContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path_comp_service(self) -> List[PathComputationService]:
        """Gets the path_comp_service of this PathComputationContext.


        :return: The path_comp_service of this PathComputationContext.
        :rtype: List[PathComputationService]
        """
        return self._path_comp_service

    @path_comp_service.setter
    def path_comp_service(self, path_comp_service: List[PathComputationService]):
        """Sets the path_comp_service of this PathComputationContext.


        :param path_comp_service: The path_comp_service of this PathComputationContext.
        :type path_comp_service: List[PathComputationService]
        """

        self._path_comp_service = path_comp_service

    @property
    def path(self) -> List[Path]:
        """Gets the path of this PathComputationContext.


        :return: The path of this PathComputationContext.
        :rtype: List[Path]
        """
        return self._path

    @path.setter
    def path(self, path: List[Path]):
        """Sets the path of this PathComputationContext.


        :param path: The path of this PathComputationContext.
        :type path: List[Path]
        """

        self._path = path
