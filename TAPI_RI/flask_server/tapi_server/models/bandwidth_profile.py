# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.capacity_value import CapacityValue  # noqa: F401,E501
from tapi_server import util


class BandwidthProfile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, bw_profile_type: str=None, committed_information_rate: CapacityValue=None, committed_burst_size: CapacityValue=None, peak_information_rate: CapacityValue=None, peak_burst_size: CapacityValue=None, color_aware: bool=None, coupling_flag: bool=None):  # noqa: E501
        """BandwidthProfile - a model defined in Swagger

        :param bw_profile_type: The bw_profile_type of this BandwidthProfile.  # noqa: E501
        :type bw_profile_type: str
        :param committed_information_rate: The committed_information_rate of this BandwidthProfile.  # noqa: E501
        :type committed_information_rate: CapacityValue
        :param committed_burst_size: The committed_burst_size of this BandwidthProfile.  # noqa: E501
        :type committed_burst_size: CapacityValue
        :param peak_information_rate: The peak_information_rate of this BandwidthProfile.  # noqa: E501
        :type peak_information_rate: CapacityValue
        :param peak_burst_size: The peak_burst_size of this BandwidthProfile.  # noqa: E501
        :type peak_burst_size: CapacityValue
        :param color_aware: The color_aware of this BandwidthProfile.  # noqa: E501
        :type color_aware: bool
        :param coupling_flag: The coupling_flag of this BandwidthProfile.  # noqa: E501
        :type coupling_flag: bool
        """
        self.swagger_types = {
            'bw_profile_type': str,
            'committed_information_rate': CapacityValue,
            'committed_burst_size': CapacityValue,
            'peak_information_rate': CapacityValue,
            'peak_burst_size': CapacityValue,
            'color_aware': bool,
            'coupling_flag': bool
        }

        self.attribute_map = {
            'bw_profile_type': 'bw-profile-type',
            'committed_information_rate': 'committed-information-rate',
            'committed_burst_size': 'committed-burst-size',
            'peak_information_rate': 'peak-information-rate',
            'peak_burst_size': 'peak-burst-size',
            'color_aware': 'color-aware',
            'coupling_flag': 'coupling-flag'
        }

        self._bw_profile_type = bw_profile_type
        self._committed_information_rate = committed_information_rate
        self._committed_burst_size = committed_burst_size
        self._peak_information_rate = peak_information_rate
        self._peak_burst_size = peak_burst_size
        self._color_aware = color_aware
        self._coupling_flag = coupling_flag

    @classmethod
    def from_dict(cls, dikt) -> 'BandwidthProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bandwidth-profile of this BandwidthProfile.  # noqa: E501
        :rtype: BandwidthProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bw_profile_type(self) -> str:
        """Gets the bw_profile_type of this BandwidthProfile.


        :return: The bw_profile_type of this BandwidthProfile.
        :rtype: str
        """
        return self._bw_profile_type

    @bw_profile_type.setter
    def bw_profile_type(self, bw_profile_type: str):
        """Sets the bw_profile_type of this BandwidthProfile.


        :param bw_profile_type: The bw_profile_type of this BandwidthProfile.
        :type bw_profile_type: str
        """
        allowed_values = ["MEF_10.x", "RFC_2697", "RFC_2698", "RFC_4115"]  # noqa: E501
        if bw_profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bw_profile_type` ({0}), must be one of {1}"
                .format(bw_profile_type, allowed_values)
            )

        self._bw_profile_type = bw_profile_type

    @property
    def committed_information_rate(self) -> CapacityValue:
        """Gets the committed_information_rate of this BandwidthProfile.


        :return: The committed_information_rate of this BandwidthProfile.
        :rtype: CapacityValue
        """
        return self._committed_information_rate

    @committed_information_rate.setter
    def committed_information_rate(self, committed_information_rate: CapacityValue):
        """Sets the committed_information_rate of this BandwidthProfile.


        :param committed_information_rate: The committed_information_rate of this BandwidthProfile.
        :type committed_information_rate: CapacityValue
        """

        self._committed_information_rate = committed_information_rate

    @property
    def committed_burst_size(self) -> CapacityValue:
        """Gets the committed_burst_size of this BandwidthProfile.


        :return: The committed_burst_size of this BandwidthProfile.
        :rtype: CapacityValue
        """
        return self._committed_burst_size

    @committed_burst_size.setter
    def committed_burst_size(self, committed_burst_size: CapacityValue):
        """Sets the committed_burst_size of this BandwidthProfile.


        :param committed_burst_size: The committed_burst_size of this BandwidthProfile.
        :type committed_burst_size: CapacityValue
        """

        self._committed_burst_size = committed_burst_size

    @property
    def peak_information_rate(self) -> CapacityValue:
        """Gets the peak_information_rate of this BandwidthProfile.


        :return: The peak_information_rate of this BandwidthProfile.
        :rtype: CapacityValue
        """
        return self._peak_information_rate

    @peak_information_rate.setter
    def peak_information_rate(self, peak_information_rate: CapacityValue):
        """Sets the peak_information_rate of this BandwidthProfile.


        :param peak_information_rate: The peak_information_rate of this BandwidthProfile.
        :type peak_information_rate: CapacityValue
        """

        self._peak_information_rate = peak_information_rate

    @property
    def peak_burst_size(self) -> CapacityValue:
        """Gets the peak_burst_size of this BandwidthProfile.


        :return: The peak_burst_size of this BandwidthProfile.
        :rtype: CapacityValue
        """
        return self._peak_burst_size

    @peak_burst_size.setter
    def peak_burst_size(self, peak_burst_size: CapacityValue):
        """Sets the peak_burst_size of this BandwidthProfile.


        :param peak_burst_size: The peak_burst_size of this BandwidthProfile.
        :type peak_burst_size: CapacityValue
        """

        self._peak_burst_size = peak_burst_size

    @property
    def color_aware(self) -> bool:
        """Gets the color_aware of this BandwidthProfile.


        :return: The color_aware of this BandwidthProfile.
        :rtype: bool
        """
        return self._color_aware

    @color_aware.setter
    def color_aware(self, color_aware: bool):
        """Sets the color_aware of this BandwidthProfile.


        :param color_aware: The color_aware of this BandwidthProfile.
        :type color_aware: bool
        """

        self._color_aware = color_aware

    @property
    def coupling_flag(self) -> bool:
        """Gets the coupling_flag of this BandwidthProfile.


        :return: The coupling_flag of this BandwidthProfile.
        :rtype: bool
        """
        return self._coupling_flag

    @coupling_flag.setter
    def coupling_flag(self, coupling_flag: bool):
        """Sets the coupling_flag of this BandwidthProfile.


        :param coupling_flag: The coupling_flag of this BandwidthProfile.
        :type coupling_flag: bool
        """

        self._coupling_flag = coupling_flag
