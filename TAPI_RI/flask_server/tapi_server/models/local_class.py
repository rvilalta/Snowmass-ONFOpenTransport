# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server import util


class LocalClass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, local_id: str=None, name: List[NameAndValue]=None):  # noqa: E501
        """LocalClass - a model defined in Swagger

        :param local_id: The local_id of this LocalClass.  # noqa: E501
        :type local_id: str
        :param name: The name of this LocalClass.  # noqa: E501
        :type name: List[NameAndValue]
        """
        self.swagger_types = {
            'local_id': str,
            'name': List[NameAndValue]
        }

        self.attribute_map = {
            'local_id': 'local-id',
            'name': 'name'
        }

        self._local_id = local_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'LocalClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The local-class of this LocalClass.  # noqa: E501
        :rtype: LocalClass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_id(self) -> str:
        """Gets the local_id of this LocalClass.


        :return: The local_id of this LocalClass.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id: str):
        """Sets the local_id of this LocalClass.


        :param local_id: The local_id of this LocalClass.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this LocalClass.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this LocalClass.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this LocalClass.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this LocalClass.
        :type name: List[NameAndValue]
        """

        self._name = name
