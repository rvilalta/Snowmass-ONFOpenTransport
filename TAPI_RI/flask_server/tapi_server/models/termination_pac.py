# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class TerminationPac(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, termination_direction: str=None, termination_state: str=None):  # noqa: E501
        """TerminationPac - a model defined in Swagger

        :param termination_direction: The termination_direction of this TerminationPac.  # noqa: E501
        :type termination_direction: str
        :param termination_state: The termination_state of this TerminationPac.  # noqa: E501
        :type termination_state: str
        """
        self.swagger_types = {
            'termination_direction': str,
            'termination_state': str
        }

        self.attribute_map = {
            'termination_direction': 'termination-direction',
            'termination_state': 'termination-state'
        }

        self._termination_direction = termination_direction
        self._termination_state = termination_state

    @classmethod
    def from_dict(cls, dikt) -> 'TerminationPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The termination-pac of this TerminationPac.  # noqa: E501
        :rtype: TerminationPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def termination_direction(self) -> str:
        """Gets the termination_direction of this TerminationPac.

        The overall directionality of the LP.  - A BIDIRECTIONAL LP will have some SINK and/or SOURCE flowss. - A SINK LP can only contain elements with SINK flows or CONTRA_DIRECTION_SOURCE flows - A SOURCE LP can only contain SOURCE flows or CONTRA_DIRECTION_SINK flows  # noqa: E501

        :return: The termination_direction of this TerminationPac.
        :rtype: str
        """
        return self._termination_direction

    @termination_direction.setter
    def termination_direction(self, termination_direction: str):
        """Sets the termination_direction of this TerminationPac.

        The overall directionality of the LP.  - A BIDIRECTIONAL LP will have some SINK and/or SOURCE flowss. - A SINK LP can only contain elements with SINK flows or CONTRA_DIRECTION_SOURCE flows - A SOURCE LP can only contain SOURCE flows or CONTRA_DIRECTION_SINK flows  # noqa: E501

        :param termination_direction: The termination_direction of this TerminationPac.
        :type termination_direction: str
        """
        allowed_values = ["BIDIRECTIONAL", "SINK", "SOURCE", "UNDEFINED_OR_UNKNOWN"]  # noqa: E501
        if termination_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `termination_direction` ({0}), must be one of {1}"
                .format(termination_direction, allowed_values)
            )

        self._termination_direction = termination_direction

    @property
    def termination_state(self) -> str:
        """Gets the termination_state of this TerminationPac.

        Indicates whether the layer is terminated and if so how.  # noqa: E501

        :return: The termination_state of this TerminationPac.
        :rtype: str
        """
        return self._termination_state

    @termination_state.setter
    def termination_state(self, termination_state: str):
        """Sets the termination_state of this TerminationPac.

        Indicates whether the layer is terminated and if so how.  # noqa: E501

        :param termination_state: The termination_state of this TerminationPac.
        :type termination_state: str
        """
        allowed_values = ["LP_CAN_NEVER_TERMINATE", "LT_NOT_TERMINATED", "TERMINATED_SERVER_TO_CLIENT_FLOW", "TERMINATED_CLIENT_TO_SERVER_FLOW", "TERMINATED_BIDIRECTIONAL", "LT_PERMENANTLY_TERMINATED", "TERMINATION_STATE_UNKNOWN"]  # noqa: E501
        if termination_state not in allowed_values:
            raise ValueError(
                "Invalid value for `termination_state` ({0}), must be one of {1}"
                .format(termination_state, allowed_values)
            )

        self._termination_state = termination_state
