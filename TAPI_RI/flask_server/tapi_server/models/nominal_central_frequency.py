# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class NominalCentralFrequency(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, grid_type: str=None, adjustment_granularity: str=None, channel_number: str=None ):  # noqa: E501
        """SdmPool - a model defined in Swagger

        :param available_core: The available_core of this NodeEdgePoint.  # noqa: E501
        :type available_core: List[AvailableCore]
        :param available_transceiver: The available_transceiver of this NodeEdgePoint.  # noqa: E501
        :type available_transceiver: AvailableTransceiver
        """
        self.swagger_types = {
            'grid_type': str,
            'adjustment_granularity': str,
            'channel_number': str
        }

        self.attribute_map = {
            'grid_type': 'grid-type',
            'adjustment_granularity': 'adjustment-granularity',
            'channel_number': 'channel-number'
        }

        self._grid_type = grid_type
        self._adjustment_granularity = adjustment_granularity
        self._channel_number = channel_number

    @classmethod
    def from_dict(cls, dikt) -> 'NominalCentralFrequency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The node-edge-point of this NodeEdgePoint.  # noqa: E501
        :rtype: NodeEdgePoint
        """
        return util.deserialize_model(dikt, cls)


    @property
    def grid_type(self) -> str:
        """Gets the available_transceiver of this NodeEdgePoint.

        :return: The available_transceiver of this NodeEdgePoint.
        :rtype: AvailableTransceiver
        """
        return self._grid_type

    @grid_type.setter
    def grid_type(self, grid_type: str):
        """Sets the available_transceiver of this NodeEdgePoint.

        :param available_transceiver: The available_transceiver of this NodeEdgePoint.
        :type available_transceiver: AvailableTransceiver
        """

        self._grid_type = grid_type

    @property
    def adjustment_granularity(self) -> str:
        """Gets the available_transceiver of this NodeEdgePoint.

        :return: The available_transceiver of this NodeEdgePoint.
        :rtype: AvailableTransceiver
        """
        return self._adjustment_granularity

    @adjustment_granularity.setter
    def adjustment_granularity(self, adjustment_granularity: str):
        """Sets the available_transceiver of this NodeEdgePoint.

        :param available_transceiver: The available_transceiver of this NodeEdgePoint.
        :type available_transceiver: AvailableTransceiver
        """

        self._adjustment_granularity = adjustment_granularity

    @property
    def channel_number(self) -> str:
        """Gets the available_transceiver of this NodeEdgePoint.

        :return: The available_transceiver of this NodeEdgePoint.
        :rtype: AvailableTransceiver
        """
        return self._channel_number

    @channel_number.setter
    def channel_number(self, channel_number: str):
        """Sets the available_transceiver of this NodeEdgePoint.

        :param available_transceiver: The available_transceiver of this NodeEdgePoint.
        :type available_transceiver: AvailableTransceiver
        """

        self._channel_number = channel_number

   