# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.local_class import LocalClass  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, local_id: str=None, name: List[NameAndValue]=None, rule_type: str=None, forwarding_rule: str=None, override_priority: str=None):  # noqa: E501
        """Rule - a model defined in Swagger

        :param local_id: The local_id of this Rule.  # noqa: E501
        :type local_id: str
        :param name: The name of this Rule.  # noqa: E501
        :type name: List[NameAndValue]
        :param rule_type: The rule_type of this Rule.  # noqa: E501
        :type rule_type: str
        :param forwarding_rule: The forwarding_rule of this Rule.  # noqa: E501
        :type forwarding_rule: str
        :param override_priority: The override_priority of this Rule.  # noqa: E501
        :type override_priority: str
        """
        self.swagger_types = {
            'local_id': str,
            'name': List[NameAndValue],
            'rule_type': str,
            'forwarding_rule': str,
            'override_priority': str
        }

        self.attribute_map = {
            'local_id': 'local-id',
            'name': 'name',
            'rule_type': 'rule-type',
            'forwarding_rule': 'forwarding-rule',
            'override_priority': 'override-priority'
        }

        self._local_id = local_id
        self._name = name
        self._rule_type = rule_type
        self._forwarding_rule = forwarding_rule
        self._override_priority = override_priority

    @classmethod
    def from_dict(cls, dikt) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The rule of this Rule.  # noqa: E501
        :rtype: Rule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_id(self) -> str:
        """Gets the local_id of this Rule.


        :return: The local_id of this Rule.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id: str):
        """Sets the local_id of this Rule.


        :param local_id: The local_id of this Rule.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this Rule.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this Rule.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this Rule.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this Rule.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def rule_type(self) -> str:
        """Gets the rule_type of this Rule.


        :return: The rule_type of this Rule.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type: str):
        """Sets the rule_type of this Rule.


        :param rule_type: The rule_type of this Rule.
        :type rule_type: str
        """
        allowed_values = ["FORWARDING", "CAPACITY", "COST", "TIMING", "RISK", "GROUPING"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    @property
    def forwarding_rule(self) -> str:
        """Gets the forwarding_rule of this Rule.


        :return: The forwarding_rule of this Rule.
        :rtype: str
        """
        return self._forwarding_rule

    @forwarding_rule.setter
    def forwarding_rule(self, forwarding_rule: str):
        """Sets the forwarding_rule of this Rule.


        :param forwarding_rule: The forwarding_rule of this Rule.
        :type forwarding_rule: str
        """
        allowed_values = ["MAY_FORWARD_ACROSS_GROUP", "MUST_FORWARD_ACROSS_GROUP", "CANNOT_FORWARD_ACROSS_GROUP", "NO_STATEMENT_ON_FORWARDING"]  # noqa: E501
        if forwarding_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `forwarding_rule` ({0}), must be one of {1}"
                .format(forwarding_rule, allowed_values)
            )

        self._forwarding_rule = forwarding_rule

    @property
    def override_priority(self) -> str:
        """Gets the override_priority of this Rule.


        :return: The override_priority of this Rule.
        :rtype: str
        """
        return self._override_priority

    @override_priority.setter
    def override_priority(self, override_priority: str):
        """Sets the override_priority of this Rule.


        :param override_priority: The override_priority of this Rule.
        :type override_priority: str
        """

        self._override_priority = override_priority
