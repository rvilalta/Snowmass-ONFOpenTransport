# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class RouteComputePolicy(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, route_objective_function: str=None, diversity_policy: str=None):  # noqa: E501
        """RouteComputePolicy - a model defined in Swagger

        :param route_objective_function: The route_objective_function of this RouteComputePolicy.  # noqa: E501
        :type route_objective_function: str
        :param diversity_policy: The diversity_policy of this RouteComputePolicy.  # noqa: E501
        :type diversity_policy: str
        """
        self.swagger_types = {
            'route_objective_function': str,
            'diversity_policy': str
        }

        self.attribute_map = {
            'route_objective_function': 'route-objective-function',
            'diversity_policy': 'diversity-policy'
        }

        self._route_objective_function = route_objective_function
        self._diversity_policy = diversity_policy

    @classmethod
    def from_dict(cls, dikt) -> 'RouteComputePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The route-compute-policy of this RouteComputePolicy.  # noqa: E501
        :rtype: RouteComputePolicy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def route_objective_function(self) -> str:
        """Gets the route_objective_function of this RouteComputePolicy.


        :return: The route_objective_function of this RouteComputePolicy.
        :rtype: str
        """
        return self._route_objective_function

    @route_objective_function.setter
    def route_objective_function(self, route_objective_function: str):
        """Sets the route_objective_function of this RouteComputePolicy.


        :param route_objective_function: The route_objective_function of this RouteComputePolicy.
        :type route_objective_function: str
        """
        allowed_values = ["MIN_WORK_ROUTE_HOP", "MIN_WORK_ROUTE_COST", "MIN_WORK_ROUTE_LATENCY", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_HOP", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_COST", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_LATENCY", "LOAD_BALANCE_MAX_UNUSED_CAPACITY"]  # noqa: E501
        if route_objective_function not in allowed_values:
            raise ValueError(
                "Invalid value for `route_objective_function` ({0}), must be one of {1}"
                .format(route_objective_function, allowed_values)
            )

        self._route_objective_function = route_objective_function

    @property
    def diversity_policy(self) -> str:
        """Gets the diversity_policy of this RouteComputePolicy.


        :return: The diversity_policy of this RouteComputePolicy.
        :rtype: str
        """
        return self._diversity_policy

    @diversity_policy.setter
    def diversity_policy(self, diversity_policy: str):
        """Sets the diversity_policy of this RouteComputePolicy.


        :param diversity_policy: The diversity_policy of this RouteComputePolicy.
        :type diversity_policy: str
        """
        allowed_values = ["SRLG", "SRNG", "SNG", "NODE", "LINK"]  # noqa: E501
        if diversity_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `diversity_policy` ({0}), must be one of {1}"
                .format(diversity_policy, allowed_values)
            )

        self._diversity_policy = diversity_policy
