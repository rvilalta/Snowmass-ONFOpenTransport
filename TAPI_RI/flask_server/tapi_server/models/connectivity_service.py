# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.admin_state_pac import AdminStatePac  # noqa: F401,E501
from tapi_server.models.capacity import Capacity  # noqa: F401,E501
from tapi_server.models.connectivity_constraint import ConnectivityConstraint  # noqa: F401,E501
from tapi_server.models.connectivity_service_end_point import ConnectivityServiceEndPoint  # noqa: F401,E501
from tapi_server.models.cost_characteristic import CostCharacteristic  # noqa: F401,E501
from tapi_server.models.latency_characteristic import LatencyCharacteristic  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server.models.resilience_constraint import ResilienceConstraint  # noqa: F401,E501
from tapi_server.models.resilience_type import ResilienceType  # noqa: F401,E501
from tapi_server.models.service_spec import ServiceSpec  # noqa: F401,E501
from tapi_server.models.time_range import TimeRange  # noqa: F401,E501
from tapi_server.models.topology_constraint import TopologyConstraint  # noqa: F401,E501
from tapi_server.models.include_core import IncludeCore
from tapi_server import util


class ConnectivityService(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, name: List[NameAndValue]=None, route_objective_function: str=None, diversity_policy: str=None, service_type: str=None, service_level: str=None, is_exclusive: bool=None, requested_capacity: Capacity=None, schedule: TimeRange=None, cost_characteristic: List[CostCharacteristic]=None, latency_characteristic: List[LatencyCharacteristic]=None, coroute_inclusion: str=None, diversity_exclusion: List[str]=None, include_topology: List[str]=None, avoid_topology: List[str]=None, include_path: List[str]=None, exclude_path: List[str]=None, include_link: List[str]=None, exclude_link: List[str]=None, include_node: List[str]=None, exclude_node: List[str]=None, preferred_transport_layer: List[str]=None, administrative_state: str=None, operational_state: str=None, lifecycle_state: str=None, resilience_type: ResilienceType=None, restoration_coordinate_type: str=None, restore_priority: str=None, reversion_mode: str=None, wait_to_revert_time: str=None, hold_off_time: str=None, is_lock_out: bool=None, is_frozen: bool=None, is_coordinated_switching_both_ends: bool=None, max_switch_times: str=None, layer_protocol: str=None, end_point: List[ConnectivityServiceEndPoint]=None, connection: List[str]=None, direction: str=None, layer_protocol_name: str=None, include_core: IncludeCore=None):  # noqa: E501
        """ConnectivityService - a model defined in Swagger

        :param uuid: The uuid of this ConnectivityService.  # noqa: E501
        :type uuid: str
        :param name: The name of this ConnectivityService.  # noqa: E501
        :type name: List[NameAndValue]
        :param route_objective_function: The route_objective_function of this ConnectivityService.  # noqa: E501
        :type route_objective_function: str
        :param diversity_policy: The diversity_policy of this ConnectivityService.  # noqa: E501
        :type diversity_policy: str
        :param service_type: The service_type of this ConnectivityService.  # noqa: E501
        :type service_type: str
        :param service_level: The service_level of this ConnectivityService.  # noqa: E501
        :type service_level: str
        :param is_exclusive: The is_exclusive of this ConnectivityService.  # noqa: E501
        :type is_exclusive: bool
        :param requested_capacity: The requested_capacity of this ConnectivityService.  # noqa: E501
        :type requested_capacity: Capacity
        :param schedule: The schedule of this ConnectivityService.  # noqa: E501
        :type schedule: TimeRange
        :param cost_characteristic: The cost_characteristic of this ConnectivityService.  # noqa: E501
        :type cost_characteristic: List[CostCharacteristic]
        :param latency_characteristic: The latency_characteristic of this ConnectivityService.  # noqa: E501
        :type latency_characteristic: List[LatencyCharacteristic]
        :param coroute_inclusion: The coroute_inclusion of this ConnectivityService.  # noqa: E501
        :type coroute_inclusion: str
        :param diversity_exclusion: The diversity_exclusion of this ConnectivityService.  # noqa: E501
        :type diversity_exclusion: List[str]
        :param include_topology: The include_topology of this ConnectivityService.  # noqa: E501
        :type include_topology: List[str]
        :param avoid_topology: The avoid_topology of this ConnectivityService.  # noqa: E501
        :type avoid_topology: List[str]
        :param include_path: The include_path of this ConnectivityService.  # noqa: E501
        :type include_path: List[str]
        :param exclude_path: The exclude_path of this ConnectivityService.  # noqa: E501
        :type exclude_path: List[str]
        :param include_link: The include_link of this ConnectivityService.  # noqa: E501
        :type include_link: List[str]
        :param exclude_link: The exclude_link of this ConnectivityService.  # noqa: E501
        :type exclude_link: List[str]
        :param include_node: The include_node of this ConnectivityService.  # noqa: E501
        :type include_node: List[str]
        :param exclude_node: The exclude_node of this ConnectivityService.  # noqa: E501
        :type exclude_node: List[str]
        :param preferred_transport_layer: The preferred_transport_layer of this ConnectivityService.  # noqa: E501
        :type preferred_transport_layer: List[str]
        :param administrative_state: The administrative_state of this ConnectivityService.  # noqa: E501
        :type administrative_state: str
        :param operational_state: The operational_state of this ConnectivityService.  # noqa: E501
        :type operational_state: str
        :param lifecycle_state: The lifecycle_state of this ConnectivityService.  # noqa: E501
        :type lifecycle_state: str
        :param resilience_type: The resilience_type of this ConnectivityService.  # noqa: E501
        :type resilience_type: ResilienceType
        :param restoration_coordinate_type: The restoration_coordinate_type of this ConnectivityService.  # noqa: E501
        :type restoration_coordinate_type: str
        :param restore_priority: The restore_priority of this ConnectivityService.  # noqa: E501
        :type restore_priority: str
        :param reversion_mode: The reversion_mode of this ConnectivityService.  # noqa: E501
        :type reversion_mode: str
        :param wait_to_revert_time: The wait_to_revert_time of this ConnectivityService.  # noqa: E501
        :type wait_to_revert_time: str
        :param hold_off_time: The hold_off_time of this ConnectivityService.  # noqa: E501
        :type hold_off_time: str
        :param is_lock_out: The is_lock_out of this ConnectivityService.  # noqa: E501
        :type is_lock_out: bool
        :param is_frozen: The is_frozen of this ConnectivityService.  # noqa: E501
        :type is_frozen: bool
        :param is_coordinated_switching_both_ends: The is_coordinated_switching_both_ends of this ConnectivityService.  # noqa: E501
        :type is_coordinated_switching_both_ends: bool
        :param max_switch_times: The max_switch_times of this ConnectivityService.  # noqa: E501
        :type max_switch_times: str
        :param layer_protocol: The layer_protocol of this ConnectivityService.  # noqa: E501
        :type layer_protocol: str
        :param end_point: The end_point of this ConnectivityService.  # noqa: E501
        :type end_point: List[ConnectivityServiceEndPoint]
        :param connection: The connection of this ConnectivityService.  # noqa: E501
        :type connection: List[str]
        :param direction: The direction of this ConnectivityService.  # noqa: E501
        :type direction: str
        :param layer_protocol_name: The layer_protocol_name of this ConnectivityService.  # noqa: E501
        :type layer_protocol_name: str
        """
        self.swagger_types = {
            'uuid': str,
            'name': List[NameAndValue],
            'route_objective_function': str,
            'diversity_policy': str,
            'service_type': str,
            'service_level': str,
            'is_exclusive': bool,
            'requested_capacity': Capacity,
            'schedule': TimeRange,
            'cost_characteristic': List[CostCharacteristic],
            'latency_characteristic': List[LatencyCharacteristic],
            'coroute_inclusion': str,
            'diversity_exclusion': List[str],
            'include_topology': List[str],
            'avoid_topology': List[str],
            'include_path': List[str],
            'exclude_path': List[str],
            'include_link': List[str],
            'exclude_link': List[str],
            'include_node': List[str],
            'exclude_node': List[str],
            'preferred_transport_layer': List[str],
            'administrative_state': str,
            'operational_state': str,
            'lifecycle_state': str,
            'resilience_type': ResilienceType,
            'restoration_coordinate_type': str,
            'restore_priority': str,
            'reversion_mode': str,
            'wait_to_revert_time': str,
            'hold_off_time': str,
            'is_lock_out': bool,
            'is_frozen': bool,
            'is_coordinated_switching_both_ends': bool,
            'max_switch_times': str,
            'layer_protocol': str,
            'end_point': List[ConnectivityServiceEndPoint],
            'connection': List[str],
            'direction': str,
            'layer_protocol_name': str,
            'include_core': IncludeCore
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'route_objective_function': 'route-objective-function',
            'diversity_policy': 'diversity-policy',
            'service_type': 'service-type',
            'service_level': 'service-level',
            'is_exclusive': 'is-exclusive',
            'requested_capacity': 'requested-capacity',
            'schedule': 'schedule',
            'cost_characteristic': 'cost-characteristic',
            'latency_characteristic': 'latency-characteristic',
            'coroute_inclusion': 'coroute-inclusion',
            'diversity_exclusion': 'diversity-exclusion',
            'include_topology': 'include-topology',
            'avoid_topology': 'avoid-topology',
            'include_path': 'include-path',
            'exclude_path': 'exclude-path',
            'include_link': 'include-link',
            'exclude_link': 'exclude-link',
            'include_node': 'include-node',
            'exclude_node': 'exclude-node',
            'preferred_transport_layer': 'preferred-transport-layer',
            'administrative_state': 'administrative-state',
            'operational_state': 'operational-state',
            'lifecycle_state': 'lifecycle-state',
            'resilience_type': 'resilience-type',
            'restoration_coordinate_type': 'restoration-coordinate-type',
            'restore_priority': 'restore-priority',
            'reversion_mode': 'reversion-mode',
            'wait_to_revert_time': 'wait-to-revert-time',
            'hold_off_time': 'hold-off-time',
            'is_lock_out': 'is-lock-out',
            'is_frozen': 'is-frozen',
            'is_coordinated_switching_both_ends': 'is-coordinated-switching-both-ends',
            'max_switch_times': 'max-switch-times',
            'layer_protocol': 'layer-protocol',
            'end_point': 'end-point',
            'connection': 'connection',
            'direction': 'direction',
            'layer_protocol_name': 'layer-protocol-name',
            'include_core': 'include-core'
        }

        self._uuid = uuid
        self._name = name
        self._route_objective_function = route_objective_function
        self._diversity_policy = diversity_policy
        self._service_type = service_type
        self._service_level = service_level
        self._is_exclusive = is_exclusive
        self._requested_capacity = requested_capacity
        self._schedule = schedule
        self._cost_characteristic = cost_characteristic
        self._latency_characteristic = latency_characteristic
        self._coroute_inclusion = coroute_inclusion
        self._diversity_exclusion = diversity_exclusion
        self._include_topology = include_topology
        self._avoid_topology = avoid_topology
        self._include_path = include_path
        self._exclude_path = exclude_path
        self._include_link = include_link
        self._exclude_link = exclude_link
        self._include_node = include_node
        self._exclude_node = exclude_node
        self._preferred_transport_layer = preferred_transport_layer
        self._administrative_state = administrative_state
        self._operational_state = operational_state
        self._lifecycle_state = lifecycle_state
        self._resilience_type = resilience_type
        self._restoration_coordinate_type = restoration_coordinate_type
        self._restore_priority = restore_priority
        self._reversion_mode = reversion_mode
        self._wait_to_revert_time = wait_to_revert_time
        self._hold_off_time = hold_off_time
        self._is_lock_out = is_lock_out
        self._is_frozen = is_frozen
        self._is_coordinated_switching_both_ends = is_coordinated_switching_both_ends
        self._max_switch_times = max_switch_times
        self._layer_protocol = layer_protocol
        self._end_point = end_point
        self._connection = connection
        self._direction = direction
        self._layer_protocol_name = layer_protocol_name
        self._include_core = include_core

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectivityService':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The connectivity-service of this ConnectivityService.  # noqa: E501
        :rtype: ConnectivityService
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this ConnectivityService.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :return: The uuid of this ConnectivityService.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ConnectivityService.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :param uuid: The uuid of this ConnectivityService.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this ConnectivityService.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this ConnectivityService.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this ConnectivityService.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this ConnectivityService.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def route_objective_function(self) -> str:
        """Gets the route_objective_function of this ConnectivityService.


        :return: The route_objective_function of this ConnectivityService.
        :rtype: str
        """
        return self._route_objective_function

    @route_objective_function.setter
    def route_objective_function(self, route_objective_function: str):
        """Sets the route_objective_function of this ConnectivityService.


        :param route_objective_function: The route_objective_function of this ConnectivityService.
        :type route_objective_function: str
        """
        allowed_values = ["MIN_WORK_ROUTE_HOP", "MIN_WORK_ROUTE_COST", "MIN_WORK_ROUTE_LATENCY", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_HOP", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_COST", "MIN_SUM_OF_WORK_AND_PROTECTION_ROUTE_LATENCY", "LOAD_BALANCE_MAX_UNUSED_CAPACITY"]  # noqa: E501
        if route_objective_function not in allowed_values:
            raise ValueError(
                "Invalid value for `route_objective_function` ({0}), must be one of {1}"
                .format(route_objective_function, allowed_values)
            )

        self._route_objective_function = route_objective_function

    @property
    def diversity_policy(self) -> str:
        """Gets the diversity_policy of this ConnectivityService.


        :return: The diversity_policy of this ConnectivityService.
        :rtype: str
        """
        return self._diversity_policy

    @diversity_policy.setter
    def diversity_policy(self, diversity_policy: str):
        """Sets the diversity_policy of this ConnectivityService.


        :param diversity_policy: The diversity_policy of this ConnectivityService.
        :type diversity_policy: str
        """
        allowed_values = ["SRLG", "SRNG", "SNG", "NODE", "LINK"]  # noqa: E501
        if diversity_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `diversity_policy` ({0}), must be one of {1}"
                .format(diversity_policy, allowed_values)
            )

        self._diversity_policy = diversity_policy

    @property
    def service_type(self) -> str:
        """Gets the service_type of this ConnectivityService.


        :return: The service_type of this ConnectivityService.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type: str):
        """Sets the service_type of this ConnectivityService.


        :param service_type: The service_type of this ConnectivityService.
        :type service_type: str
        """
        allowed_values = ["POINT_TO_POINT_CONNECTIVITY", "POINT_TO_MULTIPOINT_CONNECTIVITY", "MULTIPOINT_CONNECTIVITY", "ROOTED_MULTIPOINT_CONNECTIVITY"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def service_level(self) -> str:
        """Gets the service_level of this ConnectivityService.

        An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability  # noqa: E501

        :return: The service_level of this ConnectivityService.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level: str):
        """Sets the service_level of this ConnectivityService.

        An abstract value the meaning of which is mutually agreed – typically represents metrics such as - Class of service, priority, resiliency, availability  # noqa: E501

        :param service_level: The service_level of this ConnectivityService.
        :type service_level: str
        """

        self._service_level = service_level

    @property
    def is_exclusive(self) -> bool:
        """Gets the is_exclusive of this ConnectivityService.

        To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive=true) and EVPL (isExclusive=false), or between EPLAN (isExclusive=true) and EVPLAN (isExclusive=false)  # noqa: E501

        :return: The is_exclusive of this ConnectivityService.
        :rtype: bool
        """
        return self._is_exclusive

    @is_exclusive.setter
    def is_exclusive(self, is_exclusive: bool):
        """Sets the is_exclusive of this ConnectivityService.

        To distinguish if the resources are exclusive to the service  - for example between EPL(isExclusive=true) and EVPL (isExclusive=false), or between EPLAN (isExclusive=true) and EVPLAN (isExclusive=false)  # noqa: E501

        :param is_exclusive: The is_exclusive of this ConnectivityService.
        :type is_exclusive: bool
        """

        self._is_exclusive = is_exclusive

    @property
    def requested_capacity(self) -> Capacity:
        """Gets the requested_capacity of this ConnectivityService.


        :return: The requested_capacity of this ConnectivityService.
        :rtype: Capacity
        """
        return self._requested_capacity

    @requested_capacity.setter
    def requested_capacity(self, requested_capacity: Capacity):
        """Sets the requested_capacity of this ConnectivityService.


        :param requested_capacity: The requested_capacity of this ConnectivityService.
        :type requested_capacity: Capacity
        """

        self._requested_capacity = requested_capacity

    @property
    def schedule(self) -> TimeRange:
        """Gets the schedule of this ConnectivityService.


        :return: The schedule of this ConnectivityService.
        :rtype: TimeRange
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: TimeRange):
        """Sets the schedule of this ConnectivityService.


        :param schedule: The schedule of this ConnectivityService.
        :type schedule: TimeRange
        """

        self._schedule = schedule

    @property
    def cost_characteristic(self) -> List[CostCharacteristic]:
        """Gets the cost_characteristic of this ConnectivityService.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :return: The cost_characteristic of this ConnectivityService.
        :rtype: List[CostCharacteristic]
        """
        return self._cost_characteristic

    @cost_characteristic.setter
    def cost_characteristic(self, cost_characteristic: List[CostCharacteristic]):
        """Sets the cost_characteristic of this ConnectivityService.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :param cost_characteristic: The cost_characteristic of this ConnectivityService.
        :type cost_characteristic: List[CostCharacteristic]
        """

        self._cost_characteristic = cost_characteristic

    @property
    def latency_characteristic(self) -> List[LatencyCharacteristic]:
        """Gets the latency_characteristic of this ConnectivityService.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :return: The latency_characteristic of this ConnectivityService.
        :rtype: List[LatencyCharacteristic]
        """
        return self._latency_characteristic

    @latency_characteristic.setter
    def latency_characteristic(self, latency_characteristic: List[LatencyCharacteristic]):
        """Sets the latency_characteristic of this ConnectivityService.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :param latency_characteristic: The latency_characteristic of this ConnectivityService.
        :type latency_characteristic: List[LatencyCharacteristic]
        """

        self._latency_characteristic = latency_characteristic

    @property
    def coroute_inclusion(self) -> str:
        """Gets the coroute_inclusion of this ConnectivityService.


        :return: The coroute_inclusion of this ConnectivityService.
        :rtype: str
        """
        return self._coroute_inclusion

    @coroute_inclusion.setter
    def coroute_inclusion(self, coroute_inclusion: str):
        """Sets the coroute_inclusion of this ConnectivityService.


        :param coroute_inclusion: The coroute_inclusion of this ConnectivityService.
        :type coroute_inclusion: str
        """

        self._coroute_inclusion = coroute_inclusion

    @property
    def diversity_exclusion(self) -> List[str]:
        """Gets the diversity_exclusion of this ConnectivityService.


        :return: The diversity_exclusion of this ConnectivityService.
        :rtype: List[str]
        """
        return self._diversity_exclusion

    @diversity_exclusion.setter
    def diversity_exclusion(self, diversity_exclusion: List[str]):
        """Sets the diversity_exclusion of this ConnectivityService.


        :param diversity_exclusion: The diversity_exclusion of this ConnectivityService.
        :type diversity_exclusion: List[str]
        """

        self._diversity_exclusion = diversity_exclusion

    @property
    def include_topology(self) -> List[str]:
        """Gets the include_topology of this ConnectivityService.


        :return: The include_topology of this ConnectivityService.
        :rtype: List[str]
        """
        return self._include_topology

    @include_topology.setter
    def include_topology(self, include_topology: List[str]):
        """Sets the include_topology of this ConnectivityService.


        :param include_topology: The include_topology of this ConnectivityService.
        :type include_topology: List[str]
        """

        self._include_topology = include_topology

    @property
    def avoid_topology(self) -> List[str]:
        """Gets the avoid_topology of this ConnectivityService.


        :return: The avoid_topology of this ConnectivityService.
        :rtype: List[str]
        """
        return self._avoid_topology

    @avoid_topology.setter
    def avoid_topology(self, avoid_topology: List[str]):
        """Sets the avoid_topology of this ConnectivityService.


        :param avoid_topology: The avoid_topology of this ConnectivityService.
        :type avoid_topology: List[str]
        """

        self._avoid_topology = avoid_topology

    @property
    def include_path(self) -> List[str]:
        """Gets the include_path of this ConnectivityService.


        :return: The include_path of this ConnectivityService.
        :rtype: List[str]
        """
        return self._include_path

    @include_path.setter
    def include_path(self, include_path: List[str]):
        """Sets the include_path of this ConnectivityService.


        :param include_path: The include_path of this ConnectivityService.
        :type include_path: List[str]
        """

        self._include_path = include_path

    @property
    def exclude_path(self) -> List[str]:
        """Gets the exclude_path of this ConnectivityService.


        :return: The exclude_path of this ConnectivityService.
        :rtype: List[str]
        """
        return self._exclude_path

    @exclude_path.setter
    def exclude_path(self, exclude_path: List[str]):
        """Sets the exclude_path of this ConnectivityService.


        :param exclude_path: The exclude_path of this ConnectivityService.
        :type exclude_path: List[str]
        """

        self._exclude_path = exclude_path

    @property
    def include_link(self) -> List[str]:
        """Gets the include_link of this ConnectivityService.


        :return: The include_link of this ConnectivityService.
        :rtype: List[str]
        """
        return self._include_link

    @include_link.setter
    def include_link(self, include_link: List[str]):
        """Sets the include_link of this ConnectivityService.


        :param include_link: The include_link of this ConnectivityService.
        :type include_link: List[str]
        """

        self._include_link = include_link

    @property
    def exclude_link(self) -> List[str]:
        """Gets the exclude_link of this ConnectivityService.


        :return: The exclude_link of this ConnectivityService.
        :rtype: List[str]
        """
        return self._exclude_link

    @exclude_link.setter
    def exclude_link(self, exclude_link: List[str]):
        """Sets the exclude_link of this ConnectivityService.


        :param exclude_link: The exclude_link of this ConnectivityService.
        :type exclude_link: List[str]
        """

        self._exclude_link = exclude_link

    @property
    def include_node(self) -> List[str]:
        """Gets the include_node of this ConnectivityService.


        :return: The include_node of this ConnectivityService.
        :rtype: List[str]
        """
        return self._include_node

    @include_node.setter
    def include_node(self, include_node: List[str]):
        """Sets the include_node of this ConnectivityService.


        :param include_node: The include_node of this ConnectivityService.
        :type include_node: List[str]
        """

        self._include_node = include_node

    @property
    def exclude_node(self) -> List[str]:
        """Gets the exclude_node of this ConnectivityService.


        :return: The exclude_node of this ConnectivityService.
        :rtype: List[str]
        """
        return self._exclude_node

    @exclude_node.setter
    def exclude_node(self, exclude_node: List[str]):
        """Sets the exclude_node of this ConnectivityService.


        :param exclude_node: The exclude_node of this ConnectivityService.
        :type exclude_node: List[str]
        """

        self._exclude_node = exclude_node

    @property
    def preferred_transport_layer(self) -> List[str]:
        """Gets the preferred_transport_layer of this ConnectivityService.


        :return: The preferred_transport_layer of this ConnectivityService.
        :rtype: List[str]
        """
        return self._preferred_transport_layer

    @preferred_transport_layer.setter
    def preferred_transport_layer(self, preferred_transport_layer: List[str]):
        """Sets the preferred_transport_layer of this ConnectivityService.


        :param preferred_transport_layer: The preferred_transport_layer of this ConnectivityService.
        :type preferred_transport_layer: List[str]
        """
        allowed_values = ["OTSiA", "OCH", "OTU", "ODU", "ETH", "ETY", "DSR"]  # noqa: E501
        if not set(preferred_transport_layer).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preferred_transport_layer` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(preferred_transport_layer) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._preferred_transport_layer = preferred_transport_layer

    @property
    def administrative_state(self) -> str:
        """Gets the administrative_state of this ConnectivityService.


        :return: The administrative_state of this ConnectivityService.
        :rtype: str
        """
        return self._administrative_state

    @administrative_state.setter
    def administrative_state(self, administrative_state: str):
        """Sets the administrative_state of this ConnectivityService.


        :param administrative_state: The administrative_state of this ConnectivityService.
        :type administrative_state: str
        """
        allowed_values = ["LOCKED", "UNLOCKED"]  # noqa: E501
        if administrative_state not in allowed_values:
            raise ValueError(
                "Invalid value for `administrative_state` ({0}), must be one of {1}"
                .format(administrative_state, allowed_values)
            )

        self._administrative_state = administrative_state

    @property
    def operational_state(self) -> str:
        """Gets the operational_state of this ConnectivityService.


        :return: The operational_state of this ConnectivityService.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state: str):
        """Sets the operational_state of this ConnectivityService.


        :param operational_state: The operational_state of this ConnectivityService.
        :type operational_state: str
        """
        allowed_values = ["DISABLED", "ENABLED"]  # noqa: E501
        if operational_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operational_state` ({0}), must be one of {1}"
                .format(operational_state, allowed_values)
            )

        self._operational_state = operational_state

    @property
    def lifecycle_state(self) -> str:
        """Gets the lifecycle_state of this ConnectivityService.


        :return: The lifecycle_state of this ConnectivityService.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state: str):
        """Sets the lifecycle_state of this ConnectivityService.


        :param lifecycle_state: The lifecycle_state of this ConnectivityService.
        :type lifecycle_state: str
        """
        allowed_values = ["PLANNED", "POTENTIAL_AVAILABLE", "POTENTIAL_BUSY", "INSTALLED", "PENDING_REMOVAL"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state

    @property
    def resilience_type(self) -> ResilienceType:
        """Gets the resilience_type of this ConnectivityService.


        :return: The resilience_type of this ConnectivityService.
        :rtype: ResilienceType
        """
        return self._resilience_type

    @resilience_type.setter
    def resilience_type(self, resilience_type: ResilienceType):
        """Sets the resilience_type of this ConnectivityService.


        :param resilience_type: The resilience_type of this ConnectivityService.
        :type resilience_type: ResilienceType
        """

        self._resilience_type = resilience_type

    @property
    def restoration_coordinate_type(self) -> str:
        """Gets the restoration_coordinate_type of this ConnectivityService.

         The coordination mechanism between multi-layers.  # noqa: E501

        :return: The restoration_coordinate_type of this ConnectivityService.
        :rtype: str
        """
        return self._restoration_coordinate_type

    @restoration_coordinate_type.setter
    def restoration_coordinate_type(self, restoration_coordinate_type: str):
        """Sets the restoration_coordinate_type of this ConnectivityService.

         The coordination mechanism between multi-layers.  # noqa: E501

        :param restoration_coordinate_type: The restoration_coordinate_type of this ConnectivityService.
        :type restoration_coordinate_type: str
        """
        allowed_values = ["NO_COORDINATE", "HOLD_OFF_TIME", "WAIT_FOR_NOTIFICATION"]  # noqa: E501
        if restoration_coordinate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `restoration_coordinate_type` ({0}), must be one of {1}"
                .format(restoration_coordinate_type, allowed_values)
            )

        self._restoration_coordinate_type = restoration_coordinate_type

    @property
    def restore_priority(self) -> str:
        """Gets the restore_priority of this ConnectivityService.


        :return: The restore_priority of this ConnectivityService.
        :rtype: str
        """
        return self._restore_priority

    @restore_priority.setter
    def restore_priority(self, restore_priority: str):
        """Sets the restore_priority of this ConnectivityService.


        :param restore_priority: The restore_priority of this ConnectivityService.
        :type restore_priority: str
        """

        self._restore_priority = restore_priority

    @property
    def reversion_mode(self) -> str:
        """Gets the reversion_mode of this ConnectivityService.

        Indcates whether the protection scheme is revertive or non-revertive.  # noqa: E501

        :return: The reversion_mode of this ConnectivityService.
        :rtype: str
        """
        return self._reversion_mode

    @reversion_mode.setter
    def reversion_mode(self, reversion_mode: str):
        """Sets the reversion_mode of this ConnectivityService.

        Indcates whether the protection scheme is revertive or non-revertive.  # noqa: E501

        :param reversion_mode: The reversion_mode of this ConnectivityService.
        :type reversion_mode: str
        """
        allowed_values = ["REVERTIVE", "NON-REVERTIVE"]  # noqa: E501
        if reversion_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `reversion_mode` ({0}), must be one of {1}"
                .format(reversion_mode, allowed_values)
            )

        self._reversion_mode = reversion_mode

    @property
    def wait_to_revert_time(self) -> str:
        """Gets the wait_to_revert_time of this ConnectivityService.

        If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.  # noqa: E501

        :return: The wait_to_revert_time of this ConnectivityService.
        :rtype: str
        """
        return self._wait_to_revert_time

    @wait_to_revert_time.setter
    def wait_to_revert_time(self, wait_to_revert_time: str):
        """Sets the wait_to_revert_time of this ConnectivityService.

        If the protection system is revertive, this attribute specifies the time, in minutes, to wait after a fault clears on a higher priority (preferred) resource before reverting to the preferred resource.  # noqa: E501

        :param wait_to_revert_time: The wait_to_revert_time of this ConnectivityService.
        :type wait_to_revert_time: str
        """

        self._wait_to_revert_time = wait_to_revert_time

    @property
    def hold_off_time(self) -> str:
        """Gets the hold_off_time of this ConnectivityService.

        This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.  # noqa: E501

        :return: The hold_off_time of this ConnectivityService.
        :rtype: str
        """
        return self._hold_off_time

    @hold_off_time.setter
    def hold_off_time(self, hold_off_time: str):
        """Sets the hold_off_time of this ConnectivityService.

        This attribute indicates the time, in milliseconds, between declaration of signal degrade or signal fail, and the initialization of the protection switching algorithm.  # noqa: E501

        :param hold_off_time: The hold_off_time of this ConnectivityService.
        :type hold_off_time: str
        """

        self._hold_off_time = hold_off_time

    @property
    def is_lock_out(self) -> bool:
        """Gets the is_lock_out of this ConnectivityService.

        The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.  # noqa: E501

        :return: The is_lock_out of this ConnectivityService.
        :rtype: bool
        """
        return self._is_lock_out

    @is_lock_out.setter
    def is_lock_out(self, is_lock_out: bool):
        """Sets the is_lock_out of this ConnectivityService.

        The resource is configured to temporarily not be available for use in the protection scheme(s) it is part of. This overrides all other protection control states including forced. If the item is locked out then it cannot be used under any circumstances. Note: Only relevant when part of a protection scheme.  # noqa: E501

        :param is_lock_out: The is_lock_out of this ConnectivityService.
        :type is_lock_out: bool
        """

        self._is_lock_out = is_lock_out

    @property
    def is_frozen(self) -> bool:
        """Gets the is_frozen of this ConnectivityService.

        Temporarily prevents any switch action to be taken and, as such, freezes the current state.  Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.  # noqa: E501

        :return: The is_frozen of this ConnectivityService.
        :rtype: bool
        """
        return self._is_frozen

    @is_frozen.setter
    def is_frozen(self, is_frozen: bool):
        """Sets the is_frozen of this ConnectivityService.

        Temporarily prevents any switch action to be taken and, as such, freezes the current state.  Until the freeze is cleared, additional near-end external commands are rejected and fault condition changes and received APS messages are ignored. All administrative controls of any aspect of protection are rejected.  # noqa: E501

        :param is_frozen: The is_frozen of this ConnectivityService.
        :type is_frozen: bool
        """

        self._is_frozen = is_frozen

    @property
    def is_coordinated_switching_both_ends(self) -> bool:
        """Gets the is_coordinated_switching_both_ends of this ConnectivityService.

        Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.  # noqa: E501

        :return: The is_coordinated_switching_both_ends of this ConnectivityService.
        :rtype: bool
        """
        return self._is_coordinated_switching_both_ends

    @is_coordinated_switching_both_ends.setter
    def is_coordinated_switching_both_ends(self, is_coordinated_switching_both_ends: bool):
        """Sets the is_coordinated_switching_both_ends of this ConnectivityService.

        Is operating such that switching at both ends of each flow acorss the FC is coordinated at both ingress and egress ends.  # noqa: E501

        :param is_coordinated_switching_both_ends: The is_coordinated_switching_both_ends of this ConnectivityService.
        :type is_coordinated_switching_both_ends: bool
        """

        self._is_coordinated_switching_both_ends = is_coordinated_switching_both_ends

    @property
    def max_switch_times(self) -> str:
        """Gets the max_switch_times of this ConnectivityService.

        Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.  # noqa: E501

        :return: The max_switch_times of this ConnectivityService.
        :rtype: str
        """
        return self._max_switch_times

    @max_switch_times.setter
    def max_switch_times(self, max_switch_times: str):
        """Sets the max_switch_times of this ConnectivityService.

        Used to limit the maximum swtich times. When work fault disappears , and traffic return to the original work path, switch counter reset.  # noqa: E501

        :param max_switch_times: The max_switch_times of this ConnectivityService.
        :type max_switch_times: str
        """

        self._max_switch_times = max_switch_times

    @property
    def layer_protocol(self) -> str:
        """Gets the layer_protocol of this ConnectivityService.

        Indicate which layer this resilience parameters package configured for.  # noqa: E501

        :return: The layer_protocol of this ConnectivityService.
        :rtype: str
        """
        return self._layer_protocol

    @layer_protocol.setter
    def layer_protocol(self, layer_protocol: str):
        """Sets the layer_protocol of this ConnectivityService.

        Indicate which layer this resilience parameters package configured for.  # noqa: E501

        :param layer_protocol: The layer_protocol of this ConnectivityService.
        :type layer_protocol: str
        """
        allowed_values = ["OTSiA", "OCH", "OTU", "ODU", "ETH", "ETY", "DSR"]  # noqa: E501
        if layer_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `layer_protocol` ({0}), must be one of {1}"
                .format(layer_protocol, allowed_values)
            )

        self._layer_protocol = layer_protocol

    @property
    def end_point(self) -> List[ConnectivityServiceEndPoint]:
        """Gets the end_point of this ConnectivityService.


        :return: The end_point of this ConnectivityService.
        :rtype: List[ConnectivityServiceEndPoint]
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point: List[ConnectivityServiceEndPoint]):
        """Sets the end_point of this ConnectivityService.


        :param end_point: The end_point of this ConnectivityService.
        :type end_point: List[ConnectivityServiceEndPoint]
        """

        self._end_point = end_point

    @property
    def connection(self) -> List[str]:
        """Gets the connection of this ConnectivityService.


        :return: The connection of this ConnectivityService.
        :rtype: List[str]
        """
        return self._connection

    @connection.setter
    def connection(self, connection: List[str]):
        """Sets the connection of this ConnectivityService.


        :param connection: The connection of this ConnectivityService.
        :type connection: List[str]
        """

        self._connection = connection

    @property
    def direction(self) -> str:
        """Gets the direction of this ConnectivityService.


        :return: The direction of this ConnectivityService.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this ConnectivityService.


        :param direction: The direction of this ConnectivityService.
        :type direction: str
        """
        allowed_values = ["BIDIRECTIONAL", "UNIDIRECTIONAL", "UNDEFINED_OR_UNKNOWN"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def layer_protocol_name(self) -> str:
        """Gets the layer_protocol_name of this ConnectivityService.


        :return: The layer_protocol_name of this ConnectivityService.
        :rtype: str
        """
        return self._layer_protocol_name

    @layer_protocol_name.setter
    def layer_protocol_name(self, layer_protocol_name: str):
        """Sets the layer_protocol_name of this ConnectivityService.


        :param layer_protocol_name: The layer_protocol_name of this ConnectivityService.
        :type layer_protocol_name: str
        """
        allowed_values = ["OTSiA", "OCH", "OTU", "ODU", "ETH", "ETY", "DSR"]  # noqa: E501
        if layer_protocol_name not in allowed_values:
            raise ValueError(
                "Invalid value for `layer_protocol_name` ({0}), must be one of {1}"
                .format(layer_protocol_name, allowed_values)
            )

        self._layer_protocol_name = layer_protocol_name


    @property
    def include_core(self) -> IncludeCore:
        """Gets the layer_protocol_name of this ConnectivityService.


        :return: The layer_protocol_name of this ConnectivityService.
        :rtype: str
        """
        return self._include_core

    @include_core.setter
    def include_core(self, include_core: IncludeCore):
        """Sets the layer_protocol_name of this ConnectivityService.


        :param layer_protocol_name: The layer_protocol_name of this ConnectivityService.
        :type layer_protocol_name: str
        """
 

        self._include_core = include_core
        