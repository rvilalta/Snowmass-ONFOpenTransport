# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server.models.resource_spec import ResourceSpec  # noqa: F401,E501
from tapi_server.models.routing_constraint import RoutingConstraint  # noqa: F401,E501
from tapi_server import util


class Path(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, name: List[NameAndValue]=None, link: List[str]=None, routing_constraint: RoutingConstraint=None):  # noqa: E501
        """Path - a model defined in Swagger

        :param uuid: The uuid of this Path.  # noqa: E501
        :type uuid: str
        :param name: The name of this Path.  # noqa: E501
        :type name: List[NameAndValue]
        :param link: The link of this Path.  # noqa: E501
        :type link: List[str]
        :param routing_constraint: The routing_constraint of this Path.  # noqa: E501
        :type routing_constraint: RoutingConstraint
        """
        self.swagger_types = {
            'uuid': str,
            'name': List[NameAndValue],
            'link': List[str],
            'routing_constraint': RoutingConstraint
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'link': 'link',
            'routing_constraint': 'routing-constraint'
        }

        self._uuid = uuid
        self._name = name
        self._link = link
        self._routing_constraint = routing_constraint

    @classmethod
    def from_dict(cls, dikt) -> 'Path':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The path of this Path.  # noqa: E501
        :rtype: Path
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Path.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :return: The uuid of this Path.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Path.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :param uuid: The uuid of this Path.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this Path.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this Path.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this Path.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this Path.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def link(self) -> List[str]:
        """Gets the link of this Path.


        :return: The link of this Path.
        :rtype: List[str]
        """
        return self._link

    @link.setter
    def link(self, link: List[str]):
        """Sets the link of this Path.


        :param link: The link of this Path.
        :type link: List[str]
        """

        self._link = link

    @property
    def routing_constraint(self) -> RoutingConstraint:
        """Gets the routing_constraint of this Path.


        :return: The routing_constraint of this Path.
        :rtype: RoutingConstraint
        """
        return self._routing_constraint

    @routing_constraint.setter
    def routing_constraint(self, routing_constraint: RoutingConstraint):
        """Sets the routing_constraint of this Path.


        :param routing_constraint: The routing_constraint of this Path.
        :type routing_constraint: RoutingConstraint
        """

        self._routing_constraint = routing_constraint
