# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class LifecycleStatePac(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, lifecycle_state: str=None):  # noqa: E501
        """LifecycleStatePac - a model defined in Swagger

        :param lifecycle_state: The lifecycle_state of this LifecycleStatePac.  # noqa: E501
        :type lifecycle_state: str
        """
        self.swagger_types = {
            'lifecycle_state': str
        }

        self.attribute_map = {
            'lifecycle_state': 'lifecycle-state'
        }

        self._lifecycle_state = lifecycle_state

    @classmethod
    def from_dict(cls, dikt) -> 'LifecycleStatePac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The lifecycle-state-pac of this LifecycleStatePac.  # noqa: E501
        :rtype: LifecycleStatePac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lifecycle_state(self) -> str:
        """Gets the lifecycle_state of this LifecycleStatePac.


        :return: The lifecycle_state of this LifecycleStatePac.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state: str):
        """Sets the lifecycle_state of this LifecycleStatePac.


        :param lifecycle_state: The lifecycle_state of this LifecycleStatePac.
        :type lifecycle_state: str
        """
        allowed_values = ["PLANNED", "POTENTIAL_AVAILABLE", "POTENTIAL_BUSY", "INSTALLED", "PENDING_REMOVAL"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state
