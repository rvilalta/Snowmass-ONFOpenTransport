# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server.models.operational_state_pac import OperationalStatePac  # noqa: F401,E501
from tapi_server.models.resource_spec import ResourceSpec  # noqa: F401,E501
from tapi_server.models.route import Route  # noqa: F401,E501
from tapi_server.models.switch_control import SwitchControl  # noqa: F401,E501
from tapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, name: List[NameAndValue]=None, operational_state: str=None, lifecycle_state: str=None, connection_end_point: List[str]=None, lower_connection: List[str]=None, route: List[Route]=None, switch_control: List[SwitchControl]=None, direction: str=None, layer_protocol_name: str=None):  # noqa: E501
        """Connection - a model defined in Swagger

        :param uuid: The uuid of this Connection.  # noqa: E501
        :type uuid: str
        :param name: The name of this Connection.  # noqa: E501
        :type name: List[NameAndValue]
        :param operational_state: The operational_state of this Connection.  # noqa: E501
        :type operational_state: str
        :param lifecycle_state: The lifecycle_state of this Connection.  # noqa: E501
        :type lifecycle_state: str
        :param connection_end_point: The connection_end_point of this Connection.  # noqa: E501
        :type connection_end_point: List[str]
        :param lower_connection: The lower_connection of this Connection.  # noqa: E501
        :type lower_connection: List[str]
        :param route: The route of this Connection.  # noqa: E501
        :type route: List[Route]
        :param switch_control: The switch_control of this Connection.  # noqa: E501
        :type switch_control: List[SwitchControl]
        :param direction: The direction of this Connection.  # noqa: E501
        :type direction: str
        :param layer_protocol_name: The layer_protocol_name of this Connection.  # noqa: E501
        :type layer_protocol_name: str
        """
        self.swagger_types = {
            'uuid': str,
            'name': List[NameAndValue],
            'operational_state': str,
            'lifecycle_state': str,
            'connection_end_point': List[str],
            'lower_connection': List[str],
            'route': List[Route],
            'switch_control': List[SwitchControl],
            'direction': str,
            'layer_protocol_name': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'operational_state': 'operational-state',
            'lifecycle_state': 'lifecycle-state',
            'connection_end_point': 'connection-end-point',
            'lower_connection': 'lower-connection',
            'route': 'route',
            'switch_control': 'switch-control',
            'direction': 'direction',
            'layer_protocol_name': 'layer-protocol-name'
        }

        self._uuid = uuid
        self._name = name
        self._operational_state = operational_state
        self._lifecycle_state = lifecycle_state
        self._connection_end_point = connection_end_point
        self._lower_connection = lower_connection
        self._route = route
        self._switch_control = switch_control
        self._direction = direction
        self._layer_protocol_name = layer_protocol_name

    @classmethod
    def from_dict(cls, dikt) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The connection of this Connection.  # noqa: E501
        :rtype: Connection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Connection.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :return: The uuid of this Connection.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Connection.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :param uuid: The uuid of this Connection.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this Connection.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this Connection.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this Connection.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this Connection.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def operational_state(self) -> str:
        """Gets the operational_state of this Connection.


        :return: The operational_state of this Connection.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state: str):
        """Sets the operational_state of this Connection.


        :param operational_state: The operational_state of this Connection.
        :type operational_state: str
        """
        allowed_values = ["DISABLED", "ENABLED"]  # noqa: E501
        if operational_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operational_state` ({0}), must be one of {1}"
                .format(operational_state, allowed_values)
            )

        self._operational_state = operational_state

    @property
    def lifecycle_state(self) -> str:
        """Gets the lifecycle_state of this Connection.


        :return: The lifecycle_state of this Connection.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state: str):
        """Sets the lifecycle_state of this Connection.


        :param lifecycle_state: The lifecycle_state of this Connection.
        :type lifecycle_state: str
        """
        allowed_values = ["PLANNED", "POTENTIAL_AVAILABLE", "POTENTIAL_BUSY", "INSTALLED", "PENDING_REMOVAL"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state

    @property
    def connection_end_point(self) -> List[str]:
        """Gets the connection_end_point of this Connection.


        :return: The connection_end_point of this Connection.
        :rtype: List[str]
        """
        return self._connection_end_point

    @connection_end_point.setter
    def connection_end_point(self, connection_end_point: List[str]):
        """Sets the connection_end_point of this Connection.


        :param connection_end_point: The connection_end_point of this Connection.
        :type connection_end_point: List[str]
        """

        self._connection_end_point = connection_end_point

    @property
    def lower_connection(self) -> List[str]:
        """Gets the lower_connection of this Connection.


        :return: The lower_connection of this Connection.
        :rtype: List[str]
        """
        return self._lower_connection

    @lower_connection.setter
    def lower_connection(self, lower_connection: List[str]):
        """Sets the lower_connection of this Connection.


        :param lower_connection: The lower_connection of this Connection.
        :type lower_connection: List[str]
        """

        self._lower_connection = lower_connection

    @property
    def route(self) -> List[Route]:
        """Gets the route of this Connection.


        :return: The route of this Connection.
        :rtype: List[Route]
        """
        return self._route

    @route.setter
    def route(self, route: List[Route]):
        """Sets the route of this Connection.


        :param route: The route of this Connection.
        :type route: List[Route]
        """

        self._route = route

    @property
    def switch_control(self) -> List[SwitchControl]:
        """Gets the switch_control of this Connection.


        :return: The switch_control of this Connection.
        :rtype: List[SwitchControl]
        """
        return self._switch_control

    @switch_control.setter
    def switch_control(self, switch_control: List[SwitchControl]):
        """Sets the switch_control of this Connection.


        :param switch_control: The switch_control of this Connection.
        :type switch_control: List[SwitchControl]
        """

        self._switch_control = switch_control

    @property
    def direction(self) -> str:
        """Gets the direction of this Connection.


        :return: The direction of this Connection.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this Connection.


        :param direction: The direction of this Connection.
        :type direction: str
        """
        allowed_values = ["BIDIRECTIONAL", "UNIDIRECTIONAL", "UNDEFINED_OR_UNKNOWN"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def layer_protocol_name(self) -> str:
        """Gets the layer_protocol_name of this Connection.


        :return: The layer_protocol_name of this Connection.
        :rtype: str
        """
        return self._layer_protocol_name

    @layer_protocol_name.setter
    def layer_protocol_name(self, layer_protocol_name: str):
        """Sets the layer_protocol_name of this Connection.


        :param layer_protocol_name: The layer_protocol_name of this Connection.
        :type layer_protocol_name: str
        """
        allowed_values = ["OTSiA", "OCH", "OTU", "ODU", "ETH", "ETY", "DSR"]  # noqa: E501
        if layer_protocol_name not in allowed_values:
            raise ValueError(
                "Invalid value for `layer_protocol_name` ({0}), must be one of {1}"
                .format(layer_protocol_name, allowed_values)
            )

        self._layer_protocol_name = layer_protocol_name
