# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.network_topology_service import NetworkTopologyService  # noqa: F401,E501
from tapi_server.models.topology import Topology  # noqa: F401,E501
from tapi_server import util


class TopologyContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nw_topology_service: NetworkTopologyService=None, topology: List[Topology]=None):  # noqa: E501
        """TopologyContext - a model defined in Swagger

        :param nw_topology_service: The nw_topology_service of this TopologyContext.  # noqa: E501
        :type nw_topology_service: NetworkTopologyService
        :param topology: The topology of this TopologyContext.  # noqa: E501
        :type topology: List[Topology]
        """
        self.swagger_types = {
            'nw_topology_service': NetworkTopologyService,
            'topology': List[Topology]
        }

        self.attribute_map = {
            'nw_topology_service': 'nw-topology-service',
            'topology': 'topology'
        }

        self._nw_topology_service = nw_topology_service
        self._topology = topology

    @classmethod
    def from_dict(cls, dikt) -> 'TopologyContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The topology-context of this TopologyContext.  # noqa: E501
        :rtype: TopologyContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nw_topology_service(self) -> NetworkTopologyService:
        """Gets the nw_topology_service of this TopologyContext.


        :return: The nw_topology_service of this TopologyContext.
        :rtype: NetworkTopologyService
        """
        return self._nw_topology_service

    @nw_topology_service.setter
    def nw_topology_service(self, nw_topology_service: NetworkTopologyService):
        """Sets the nw_topology_service of this TopologyContext.


        :param nw_topology_service: The nw_topology_service of this TopologyContext.
        :type nw_topology_service: NetworkTopologyService
        """

        self._nw_topology_service = nw_topology_service

    @property
    def topology(self) -> List[Topology]:
        """Gets the topology of this TopologyContext.


        :return: The topology of this TopologyContext.
        :rtype: List[Topology]
        """
        return self._topology

    @topology.setter
    def topology(self, topology: List[Topology]):
        """Sets the topology of this TopologyContext.


        :param topology: The topology of this TopologyContext.
        :type topology: List[Topology]
        """

        self._topology = topology
