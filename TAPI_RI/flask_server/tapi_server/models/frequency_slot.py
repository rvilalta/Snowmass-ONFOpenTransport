# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.nominal_central_frequency import NominalCentralFrequency
from tapi_server import util


class FrequencySlot(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, slot_id: str=None, nominal_central_frequency: NominalCentralFrequency=None, slot_width_number: str=None ):  # noqa: E501
        """SdmPool - a model defined in Swagger

        :param available_core: The available_core of this NodeEdgePoint.  # noqa: E501
        :type available_core: List[AvailableCore]
        :param available_transceiver: The available_transceiver of this NodeEdgePoint.  # noqa: E501
        :type available_transceiver: AvailableTransceiver
        """
        self.swagger_types = {
            'slot_id': str,
            'nominal_central_frequency': NominalCentralFrequency,
            'slot_width_number': str 
        }

        self.attribute_map = {
            'slot_id': 'slot-id',
            'nominal_central_frequency': 'nominal-central-frequency',
            'slot_width_number': 'slot-width-number'
        }

        self._slot_id = slot_id
        self._nominal_central_frequency = nominal_central_frequency
        self._slot_width_number = slot_width_number

    @classmethod
    def from_dict(cls, dikt) -> 'FrequencySlot':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The node-edge-point of this NodeEdgePoint.  # noqa: E501
        :rtype: NodeEdgePoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slot_id(self) -> str:
        """Gets the available_transceiver of this NodeEdgePoint.

        :return: The available_transceiver of this NodeEdgePoint.
        :rtype: AvailableTransceiver
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id: str):
        """Sets the available_transceiver of this NodeEdgePoint.

        :param available_transceiver: The available_transceiver of this NodeEdgePoint.
        :type available_transceiver: AvailableTransceiver
        """

        self._slot_id = slot_id

   

    @property
    def nominal_central_frequency(self) -> NominalCentralFrequency:
        """Gets the available_core of this NodeEdgePoint.

        List of available_core. 
        :return: The available_core of this NodeEdgePoint.
        :rtype: List[AvailableCore]
        """
        return self._nominal_central_frequency

    @nominal_central_frequency.setter
    def nominal_central_frequency(self, nominal_central_frequency: NominalCentralFrequency):
        """Sets the available_core of this NodeEdgePoint.

        List of AvailableCore. 
        
        :param name: The available_core of this NodeEdgePoint.
        :type name: List[AvailableCore]
        """

        self._nominal_central_frequency = nominal_central_frequency

    @property
    def slot_width_number(self) -> str:
        """Gets the available_transceiver of this NodeEdgePoint.

        :return: The available_transceiver of this NodeEdgePoint.
        :rtype: AvailableTransceiver
        """
        return self._slot_width_number

    @slot_width_number.setter
    def slot_width_number(self, slot_width_number: str):
        """Sets the available_transceiver of this NodeEdgePoint.

        :param available_transceiver: The available_transceiver of this NodeEdgePoint.
        :type available_transceiver: AvailableTransceiver
        """

        self._slot_width_number = slot_width_number

   