# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.bandwidth_profile import BandwidthProfile  # noqa: F401,E501
from tapi_server.models.capacity_value import CapacityValue  # noqa: F401,E501
from tapi_server import util


class Capacity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, total_size: CapacityValue=None, bandwidth_profile: BandwidthProfile=None):  # noqa: E501
        """Capacity - a model defined in Swagger

        :param total_size: The total_size of this Capacity.  # noqa: E501
        :type total_size: CapacityValue
        :param bandwidth_profile: The bandwidth_profile of this Capacity.  # noqa: E501
        :type bandwidth_profile: BandwidthProfile
        """
        self.swagger_types = {
            'total_size': CapacityValue,
            'bandwidth_profile': BandwidthProfile
        }

        self.attribute_map = {
            'total_size': 'total-size',
            'bandwidth_profile': 'bandwidth-profile'
        }

        self._total_size = total_size
        self._bandwidth_profile = bandwidth_profile

    @classmethod
    def from_dict(cls, dikt) -> 'Capacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The capacity of this Capacity.  # noqa: E501
        :rtype: Capacity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_size(self) -> CapacityValue:
        """Gets the total_size of this Capacity.

        Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.  # noqa: E501

        :return: The total_size of this Capacity.
        :rtype: CapacityValue
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size: CapacityValue):
        """Sets the total_size of this Capacity.

        Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.  # noqa: E501

        :param total_size: The total_size of this Capacity.
        :type total_size: CapacityValue
        """

        self._total_size = total_size

    @property
    def bandwidth_profile(self) -> BandwidthProfile:
        """Gets the bandwidth_profile of this Capacity.


        :return: The bandwidth_profile of this Capacity.
        :rtype: BandwidthProfile
        """
        return self._bandwidth_profile

    @bandwidth_profile.setter
    def bandwidth_profile(self, bandwidth_profile: BandwidthProfile):
        """Sets the bandwidth_profile of this Capacity.


        :param bandwidth_profile: The bandwidth_profile of this Capacity.
        :type bandwidth_profile: BandwidthProfile
        """

        self._bandwidth_profile = bandwidth_profile
