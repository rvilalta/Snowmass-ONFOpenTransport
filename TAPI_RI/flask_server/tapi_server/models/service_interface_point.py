# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.admin_state_pac import AdminStatePac  # noqa: F401,E501
from tapi_server.models.capacity import Capacity  # noqa: F401,E501
from tapi_server.models.capacity_pac import CapacityPac  # noqa: F401,E501
from tapi_server.models.name_and_value import NameAndValue  # noqa: F401,E501
from tapi_server.models.resource_spec import ResourceSpec  # noqa: F401,E501
from tapi_server import util


class ServiceInterfacePoint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, name: List[NameAndValue]=None, administrative_state: str=None, operational_state: str=None, lifecycle_state: str=None, total_potential_capacity: Capacity=None, available_capacity: Capacity=None, layer_protocol_name: List[str]=None):  # noqa: E501
        """ServiceInterfacePoint - a model defined in Swagger

        :param uuid: The uuid of this ServiceInterfacePoint.  # noqa: E501
        :type uuid: str
        :param name: The name of this ServiceInterfacePoint.  # noqa: E501
        :type name: List[NameAndValue]
        :param administrative_state: The administrative_state of this ServiceInterfacePoint.  # noqa: E501
        :type administrative_state: str
        :param operational_state: The operational_state of this ServiceInterfacePoint.  # noqa: E501
        :type operational_state: str
        :param lifecycle_state: The lifecycle_state of this ServiceInterfacePoint.  # noqa: E501
        :type lifecycle_state: str
        :param total_potential_capacity: The total_potential_capacity of this ServiceInterfacePoint.  # noqa: E501
        :type total_potential_capacity: Capacity
        :param available_capacity: The available_capacity of this ServiceInterfacePoint.  # noqa: E501
        :type available_capacity: Capacity
        :param layer_protocol_name: The layer_protocol_name of this ServiceInterfacePoint.  # noqa: E501
        :type layer_protocol_name: List[str]
        """
        self.swagger_types = {
            'uuid': str,
            'name': List[NameAndValue],
            'administrative_state': str,
            'operational_state': str,
            'lifecycle_state': str,
            'total_potential_capacity': Capacity,
            'available_capacity': Capacity,
            'layer_protocol_name': List[str]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'administrative_state': 'administrative-state',
            'operational_state': 'operational-state',
            'lifecycle_state': 'lifecycle-state',
            'total_potential_capacity': 'total-potential-capacity',
            'available_capacity': 'available-capacity',
            'layer_protocol_name': 'layer-protocol-name'
        }

        self._uuid = uuid
        self._name = name
        self._administrative_state = administrative_state
        self._operational_state = operational_state
        self._lifecycle_state = lifecycle_state
        self._total_potential_capacity = total_potential_capacity
        self._available_capacity = available_capacity
        self._layer_protocol_name = layer_protocol_name

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceInterfacePoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The service-interface-point of this ServiceInterfacePoint.  # noqa: E501
        :rtype: ServiceInterfacePoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this ServiceInterfacePoint.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :return: The uuid of this ServiceInterfacePoint.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ServiceInterfacePoint.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :param uuid: The uuid of this ServiceInterfacePoint.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> List[NameAndValue]:
        """Gets the name of this ServiceInterfacePoint.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this ServiceInterfacePoint.
        :rtype: List[NameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name: List[NameAndValue]):
        """Sets the name of this ServiceInterfacePoint.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this ServiceInterfacePoint.
        :type name: List[NameAndValue]
        """

        self._name = name

    @property
    def administrative_state(self) -> str:
        """Gets the administrative_state of this ServiceInterfacePoint.


        :return: The administrative_state of this ServiceInterfacePoint.
        :rtype: str
        """
        return self._administrative_state

    @administrative_state.setter
    def administrative_state(self, administrative_state: str):
        """Sets the administrative_state of this ServiceInterfacePoint.


        :param administrative_state: The administrative_state of this ServiceInterfacePoint.
        :type administrative_state: str
        """
        allowed_values = ["LOCKED", "UNLOCKED"]  # noqa: E501
        if administrative_state not in allowed_values:
            raise ValueError(
                "Invalid value for `administrative_state` ({0}), must be one of {1}"
                .format(administrative_state, allowed_values)
            )

        self._administrative_state = administrative_state

    @property
    def operational_state(self) -> str:
        """Gets the operational_state of this ServiceInterfacePoint.


        :return: The operational_state of this ServiceInterfacePoint.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state: str):
        """Sets the operational_state of this ServiceInterfacePoint.


        :param operational_state: The operational_state of this ServiceInterfacePoint.
        :type operational_state: str
        """
        allowed_values = ["DISABLED", "ENABLED"]  # noqa: E501
        if operational_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operational_state` ({0}), must be one of {1}"
                .format(operational_state, allowed_values)
            )

        self._operational_state = operational_state

    @property
    def lifecycle_state(self) -> str:
        """Gets the lifecycle_state of this ServiceInterfacePoint.


        :return: The lifecycle_state of this ServiceInterfacePoint.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state: str):
        """Sets the lifecycle_state of this ServiceInterfacePoint.


        :param lifecycle_state: The lifecycle_state of this ServiceInterfacePoint.
        :type lifecycle_state: str
        """
        allowed_values = ["PLANNED", "POTENTIAL_AVAILABLE", "POTENTIAL_BUSY", "INSTALLED", "PENDING_REMOVAL"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state

    @property
    def total_potential_capacity(self) -> Capacity:
        """Gets the total_potential_capacity of this ServiceInterfacePoint.

        An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.  # noqa: E501

        :return: The total_potential_capacity of this ServiceInterfacePoint.
        :rtype: Capacity
        """
        return self._total_potential_capacity

    @total_potential_capacity.setter
    def total_potential_capacity(self, total_potential_capacity: Capacity):
        """Sets the total_potential_capacity of this ServiceInterfacePoint.

        An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.  # noqa: E501

        :param total_potential_capacity: The total_potential_capacity of this ServiceInterfacePoint.
        :type total_potential_capacity: Capacity
        """

        self._total_potential_capacity = total_potential_capacity

    @property
    def available_capacity(self) -> Capacity:
        """Gets the available_capacity of this ServiceInterfacePoint.

        Capacity available to be assigned.  # noqa: E501

        :return: The available_capacity of this ServiceInterfacePoint.
        :rtype: Capacity
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity: Capacity):
        """Sets the available_capacity of this ServiceInterfacePoint.

        Capacity available to be assigned.  # noqa: E501

        :param available_capacity: The available_capacity of this ServiceInterfacePoint.
        :type available_capacity: Capacity
        """

        self._available_capacity = available_capacity

    @property
    def layer_protocol_name(self) -> List[str]:
        """Gets the layer_protocol_name of this ServiceInterfacePoint.


        :return: The layer_protocol_name of this ServiceInterfacePoint.
        :rtype: List[str]
        """
        return self._layer_protocol_name

    @layer_protocol_name.setter
    def layer_protocol_name(self, layer_protocol_name: List[str]):
        """Sets the layer_protocol_name of this ServiceInterfacePoint.


        :param layer_protocol_name: The layer_protocol_name of this ServiceInterfacePoint.
        :type layer_protocol_name: List[str]
        """
        allowed_values = ["OTSiA", "OCH", "OTU", "ODU", "ETH", "ETY", "DSR"]  # noqa: E501
        if not set(layer_protocol_name).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `layer_protocol_name` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(layer_protocol_name) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._layer_protocol_name = layer_protocol_name
